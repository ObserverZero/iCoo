{"version":3,"file":"interface.js","names":["HttpApiEvent"],"sources":["../../src/http-api/interface.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixError } from \"./errors\";\n\nexport interface IHttpOpts {\n    fetchFn?: typeof global.fetch;\n\n    baseUrl: string;\n    idBaseUrl?: string;\n    prefix: string;\n    extraParams?: Record<string, string>;\n\n    accessToken?: string;\n    useAuthorizationHeader?: boolean; // defaults to true\n\n    onlyData?: boolean;\n    localTimeoutMs?: number;\n}\n\nexport interface IRequestOpts {\n    baseUrl?: string;\n    prefix?: string;\n\n    headers?: Record<string, string>;\n    abortSignal?: AbortSignal;\n    localTimeoutMs?: number;\n    keepAlive?: boolean; // defaults to false\n    json?: boolean; // defaults to true\n\n    // Set to true to prevent the request function from emitting a Session.logged_out event.\n    // This is intended for use on endpoints where M_UNKNOWN_TOKEN is a valid/notable error response,\n    // such as with token refreshes.\n    inhibitLogoutEmit?: boolean;\n}\n\nexport interface IContentUri {\n    base: string;\n    path: string;\n    params: {\n        // eslint-disable-next-line camelcase\n        access_token: string;\n    };\n}\n\nexport enum HttpApiEvent {\n    SessionLoggedOut = \"Session.logged_out\",\n    NoConsent = \"no_consent\",\n}\n\nexport type HttpApiEventHandlerMap = {\n    [HttpApiEvent.SessionLoggedOut]: (err: MatrixError) => void;\n    [HttpApiEvent.NoConsent]: (message: string, consentUri: string) => void;\n};\n\nexport interface UploadProgress {\n    loaded: number;\n    total: number;\n}\n\nexport interface UploadOpts {\n    name?: string;\n    type?: string;\n    includeFilename?: boolean;\n    progressHandler?(progress: UploadProgress): void;\n    abortController?: AbortController;\n}\n\nexport interface Upload {\n    loaded: number;\n    total: number;\n    promise: Promise<UploadResponse>;\n    abortController: AbortController;\n}\n\nexport interface UploadResponse {\n    // eslint-disable-next-line camelcase\n    content_uri: string;\n}\n\nexport type FileType = XMLHttpRequestBodyInit;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IA0DYA,YAAY;AAAA;AAAA,WAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;AAAA,GAAZA,YAAY,4BAAZA,YAAY"}