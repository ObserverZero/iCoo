import { MatrixError } from "./errors";
export interface IHttpOpts {
    fetchFn?: typeof global.fetch;
    baseUrl: string;
    idBaseUrl?: string;
    prefix: string;
    extraParams?: Record<string, string>;
    accessToken?: string;
    useAuthorizationHeader?: boolean;
    onlyData?: boolean;
    localTimeoutMs?: number;
}
export interface IRequestOpts {
    baseUrl?: string;
    prefix?: string;
    headers?: Record<string, string>;
    abortSignal?: AbortSignal;
    localTimeoutMs?: number;
    keepAlive?: boolean;
    json?: boolean;
    inhibitLogoutEmit?: boolean;
}
export interface IContentUri {
    base: string;
    path: string;
    params: {
        access_token: string;
    };
}
export declare enum HttpApiEvent {
    SessionLoggedOut = "Session.logged_out",
    NoConsent = "no_consent"
}
export type HttpApiEventHandlerMap = {
    [HttpApiEvent.SessionLoggedOut]: (err: MatrixError) => void;
    [HttpApiEvent.NoConsent]: (message: string, consentUri: string) => void;
};
export interface UploadProgress {
    loaded: number;
    total: number;
}
export interface UploadOpts {
    name?: string;
    type?: string;
    includeFilename?: boolean;
    progressHandler?(progress: UploadProgress): void;
    abortController?: AbortController;
}
export interface Upload {
    loaded: number;
    total: number;
    promise: Promise<UploadResponse>;
    abortController: AbortController;
}
export interface UploadResponse {
    content_uri: string;
}
export type FileType = XMLHttpRequestBodyInit;
//# sourceMappingURL=interface.d.ts.map