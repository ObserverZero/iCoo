{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport sdk, { EventType } from 'matrix-js-sdk';\nimport { convertCompilerOptionsFromJson } from 'typescript';\nconst loginCreds = {\n  //accessToken: \"syt_b2JzZXJ2ZXJ6ZXJv_qbsSNMdGRZpXMsNvXJeX_3OODDh\",\n  accessToken: \"syt_c2lydG91Zw_NskGmfGSoPcYMAeosoHo_0zeoWw\",\n  userId: \"@sirtoug:home.parecon.work\",\n  baseUrl: 'http://localhost:8008'\n};\nconst client = sdk.createClient({\n  baseUrl: loginCreds.baseUrl,\n  accessToken: loginCreds.accessToken,\n  userId: loginCreds.userId\n});\nconst localClient = sdk.createClient({\n  baseUrl: loginCreds.baseUrl\n});\nfunction createUser(username, password) {\n  // TODO: Add a room for the user that handles additional user information, such as hashtags, description, images,\n  // TODO - friends lists, following, memberships, etc.\n}\nfunction getHandleFromUserId() {\n  return loginCreds.userId.replace(/:.*/, '');\n}\nfunction getHandleFromRoomId(id) {\n  return id.replace(/:.*/, '');\n}\nclient.startClient();\nfunction login() {\n  client.loginWithPassword('username', 'password').then(() => {\n    console.log('Logged in!');\n  });\n}\nfunction getIdentifiedListOfGroups(ids) {\n  Object.entries(ids => {\n    console.log(ids.id);\n  });\n}\n\n// GETTERS\n\nfunction getRoomTopicFromRoomObject(room) {\n  let topic = room.currentState.getStateEvents('m.room.topic', '');\n  try {\n    return JSON.parse(topic.event.content.topic);\n  } catch (error) {\n    console.log(error);\n    if (topic == String) return topic;\n    return \"We do nothing!\";\n  }\n}\nfunction getRoomType(roomId) {\n  let room = client.getRoom(roomId);\n  let type = room.currentState.getStateEvents('m.room.create', '');\n  try {\n    return type.event.content.type;\n  } catch (error) {\n    return 'no type for you!!';\n  }\n}\nfunction getRoomName(room) {\n  let roomName = room.name;\n  return roomName;\n}\nfunction returnRoomNamesFromRoomObject(rooms) {\n  const roomNames = rooms.map(room => room.name);\n  return roomNames;\n}\nfunction returnRoomIdsFromRoomObject(rooms) {\n  const roomIds = rooms.map(room => room.roomId);\n  return roomIds;\n}\nfunction returnRoomTypeFromRoomObject(rooms) {\n  const roomTypes = rooms.map(room => getRoomType(room.id));\n}\nasync function getRoomById(roomId) {\n  try {\n    let room = await client.getRoom(roomId);\n    const name = room.name;\n    const topic = getRoomTopicFromRoomObject(room);\n    const group = {\n      name: name,\n      topic: topic\n    };\n    return group;\n  } catch (error) {\n    return;\n  }\n}\nfunction updateChat(roomId) {\n  let room = client.getRoom(roomId);\n  let creator = room.currentState.getStateEvents('m.room.create', '');\n  let idAndTopicObject = {\n    id: roomId,\n    creator: creator.event.content.creator.replace(/:.*/, ''),\n    topic: getRoomTopicFromRoomObject(room),\n    content: getRoomTimeline(roomId)\n  };\n  return idAndTopicObject;\n}\nfunction isParent() {\n  return;\n}\nfunction isChild() {\n  return;\n}\nasync function getOwnProfile() {\n  let responseFromServer = await client.getProfileInfo(loginCreds.userId);\n  responseFromServer.handle = getHandleFromUserId();\n  responseFromServer.displayname = JSON.parse(responseFromServer.displayname);\n  //responseFromServer.events = JSON.parse(responseFromServer.events)\n  console.log(responseFromServer);\n  return responseFromServer;\n}\nasync function getTimeline(roomId) {\n  return client.roomInitialSync(roomId, 1000);\n}\nasync function setArbitraryEvent(roomId, eventType, content) {\n  return;\n}\nasync function printProfile() {\n  console.log(await client.getProfileInfo(loginCreds.userId));\n}\nfunction getRoomTimeline(roomId) {\n  let room = client.getRoom(roomId);\n  let messageArray = [];\n  room.timeline.forEach(t => {\n    messageArray.push(t.event);\n  });\n  return messageArray;\n}\nfunction returnIdOfChildrenInSpace(spaceId) {\n  let space = client.getRoom(spaceId);\n  let childrenMap;\n  try {\n    childrenMap = space.relations.room.currentState.events;\n  } catch (_unused) {\n    return;\n  }\n  let roomArray = [];\n  let roomChildren = [];\n  let arrayOfRoomIds = [];\n  let childrenIds = [];\n  roomArray = Array.from(childrenMap, function (entry) {\n    return {\n      key: entry[0],\n      value: entry[1]\n    };\n  });\n  roomArray.forEach(room => {\n    if (room.key === 'm.space.child') {\n      roomChildren = room.value;\n    }\n  });\n  roomArray = Array.from(roomChildren, function (entry) {\n    return {\n      key: entry[0],\n      value: entry[1]\n    };\n  });\n  roomArray.forEach(room => {\n    arrayOfRoomIds.push(room.key);\n  });\n  return arrayOfRoomIds;\n}\nfunction getChildren(spaceId) {\n  let ids = returnIdOfChildrenInSpace(spaceId);\n  let roomObjects = [];\n  ids.forEach(id => {\n    roomObjects.push(client.getRoom(id));\n  });\n  return roomObjects;\n}\nfunction getGroupContent(groupId) {\n  let content = {};\n  let groups = getChildren(groupId);\n  groups.forEach(child => {\n    if (child != null) {\n      let name = child.name;\n      let id = child.roomId;\n      let children = getChildren(child.roomId);\n      let arrayOfTopics = [];\n      let idAndTopicObject = {};\n      content[name] = {};\n      children.forEach(item => {\n        try {\n          let creator = item.currentState.getStateEvents('m.room.create', '');\n          idAndTopicObject[item.roomId] = {\n            id: item.roomId,\n            creator: creator.event.content.creator.replace(/:.*/, ''),\n            topic: getRoomTopicFromRoomObject(item),\n            content: getRoomTimeline(item.roomId)\n          };\n        } catch (_unused2) {\n          return;\n        }\n      });\n      content[name] = {\n        id: id,\n        children: idAndTopicObject\n      };\n    }\n  });\n  console.log(content);\n  return content;\n}\nfunction getChatContent(groupId) {\n  let content = getGroupContent(groupId);\n  return content.chat;\n}\nfunction getSubgroupContent(groupId) {\n  let content = getGroupContent(groupId);\n  return content.groups;\n}\nfunction getBoardContent(groupId) {\n  let content = getGroupContent(groupId);\n  return content.board;\n}\nfunction produceHrefAddressesForGroups(rooms) {\n  const roomIds = rooms.map(room => {\n    let id = room.roomId.replace(/:.*/, '');\n    id = id.replace(/!/, '');\n    id = \"/tabs/group/\" + id;\n    return id;\n  });\n  // roomIds.forEach(roomId => console.log(roomId))\n  return roomIds;\n}\nfunction getGroups() {\n  let rooms = client.getRooms();\n  let roomNamesAndIdsAsObject = {};\n  let roomNames = returnRoomNamesFromRoomObject(rooms);\n  let roomIds = returnRoomIdsFromRoomObject(rooms);\n  let hrefs = produceHrefAddressesForGroups(rooms);\n  let roomHandles = roomIds.map(roomId => getHandleFromRoomId(roomId));\n  let roomTopics = rooms.map(room => getRoomTopicFromRoomObject(room));\n  let roomTypes = roomIds.map(roomId => getRoomType(roomId));\n  let roomProduct = [];\n  for (let i = 0; i < roomNames.length; i++) {\n    roomProduct.push({\n      name: roomNames[i],\n      id: roomIds[i],\n      topic: roomTopics[i],\n      type: roomTypes[i],\n      handle: roomHandles[i],\n      href: hrefs[i]\n    });\n  }\n  Object.assign(roomNamesAndIdsAsObject, roomProduct);\n  return roomNamesAndIdsAsObject;\n}\n\n// SETTERS\n\nfunction createSubSpace(parentSpaceId, subSpaceName, subSpaceTopic, roomId) {\n  client.sendStateEvent(roomId, 'm.space.parent', {\n    via: ['home.parecon.work'],\n    state_key: parentSpaceId,\n    canonical: true\n  });\n  return;\n}\n\n// TODO: add type for space or room\nasync function createSpace(groupName, topic, publicorprivate) {\n  let returnValue = await client.createRoom({\n    name: groupName,\n    visibility: 'public',\n    topic: topic,\n    creation_content: {\n      type: 'm.space'\n    }\n  }).then(response => {\n    console.log(`Room created: ${response.room_id}`);\n    return response.room_id;\n    //client.sendStateEvent(response.room_id, 'm.room.create', {room_type: 'm.space'})\n  }).catch(error => {\n    console.error(`Error creating room: ${error}`);\n  });\n  return returnValue;\n}\nasync function createRoom(roomName, topic) {\n  let returnValue = await client.createRoom({\n    name: roomName,\n    visibility: 'private',\n    topic: topic\n  }).then(response => {\n    console.log(`Room created: ${response.room_id}`);\n    return response.room_id;\n  }).catch(error => {\n    console.error(`Error creating room: ${error}`);\n  });\n  return returnValue;\n}\nasync function createPost(chatSpaceId, topic) {\n  let newRoom = await createRoom(\"post\", topic);\n  assignChild(chatSpaceId, newRoom);\n  assignParent(newRoom, chatSpaceId);\n  return;\n}\nfunction assignChild(parentSpaceId, subSpaceId) {\n  client.sendStateEvent(parentSpaceId, 'm.space.child', {\n    via: ['home.parecon.work']\n  }, subSpaceId).then(error => {\n    console.log(error);\n  });\n  console.log(\"assigned child\");\n}\nfunction assignParent(subSpaceId, parentSpaceId) {\n  client.sendStateEvent(subSpaceId, 'm.space.parent', {\n    canonical: true,\n    via: ['home.parecon.work']\n  }, parentSpaceId);\n  console.log(\"assigned parent\");\n}\nasync function assignParentAndChild(parentSpaceId, subSpaceId) {\n  assignChild(parentSpaceId, subSpaceId);\n  assignParent(subSpaceId, parentSpaceId);\n  return true;\n}\nasync function createRealGroup(groupName, topic) {\n  // TODO: add rooms that identify group as parent and canonical parent, and add child identifier on the space.\n  // TODO - power levels will hopefully isolate the rooms as necessary to the space.\n  let mainSpace = await createSpace(groupName, '{\"text\": \"' + topic + '\", \"banner\": \"group\"}');\n  let chatSpace = await createSpace(\"chat\", '{\"text\": \"chat\", \"banner\": \"group\"}');\n  let boardSpace = await createSpace(\"board\", '{\"text\": \"board\", \"banner\": \"group\"}');\n  let calendarSpace = await createSpace(\"groups\", '{\"text\": \"groups\", \"banner\": \"group\"}');\n  let juryRig = await assignParentAndChild(mainSpace, chatSpace);\n  juryRig = await assignParentAndChild(mainSpace, boardSpace);\n  juryRig = await assignParentAndChild(mainSpace, calendarSpace);\n  console.log(mainSpace);\n  console.log(chatSpace);\n  console.log(boardSpace);\n  console.log(calendarSpace);\n  return mainSpace;\n}\nasync function createSubGroup(groupName, topic, parentGroupSpaceId) {\n  let mainSpaceId = await createRealGroup(groupName, topic);\n  assignParentAndChild(parentGroupSpaceId, mainSpaceId);\n  return;\n}\nfunction joinGroup(groupId) {\n  client.joinRoom(groupId).then(response => {\n    // meh\n  }).catch(error => {\n    // meh\n  });\n}\nasync function getRoomState() {\n  let shortlist = [];\n  let shortlistObject = {};\n  let response = await client.roomState(\"!OGEhHVWSdvArJzumhm:matrix.org\").then(response => {\n    for (let i = 0; i < 100; i++) {\n      shortlist.push(response[i]);\n      Object.assign(shortlistObject, shortlist);\n    }\n    return shortlistObject;\n  });\n  return response;\n}\nasync function getMessages(roomId) {\n  client.initialSync(roomId).then(response => {\n    const timeline = response.timeline;\n    // Do something with the timeline, such as render it in a chat interface\n  }).catch(error => {\n    console.error(`Error fetching initial sync for room ${roomId}: ${error}`);\n  });\n}\nfunction sendMessage(roomId, message) {\n  const content = {\n    body: \"A hobbit trying to scale mount everest\",\n    msgtype: \"m.text\"\n  };\n  client.sendEvent(\"roomId\", \"m.room.message\", content, \"\", (err, res) => {\n    console.log(err);\n  });\n}\nfunction updateTimeline(roomId) {\n  //client.on(\"Room.timeline\", function (event, room, toStartOfTimeline) {\n  //  if (toStartOfTimeline) {\n  //    var messageToAppend = room.timeline[room.timeline.length - 1]\n  //    return messageToAppend\n  //  }\n  //})\n  client.on(\"Room.timeline\", function (event, room, toStartOfTimeline) {\n    if (event.getType() !== \"m.room.message\") {\n      return; // only use messages\n    }\n\n    console.log(event.event.content.body);\n  });\n}\nasync function getMembersOfRoom(roomId) {\n  let room = await client.getRoom(roomId);\n  let members = room.getMembers();\n  return members;\n}\nfunction sendText(roomId, text) {\n  client.sendTextMessage(roomId, text);\n}\nfunction accountData() {\n  return client.getAccountData();\n}\n\n// TODO - Add a getter to get a room's timeline\n// TODO - Get a filter to get a group's associated groups\n// TODO -\n// TODO: Ranking functionality of group membership to curate what appears on top\n// TODO - of the list on group profile. Use the \"suggested\" value of space children\n// TODO - to determine whether the rooms are considered important. Canonical parent\n// TODO - is also useful\n\nexport const useMatrixClient = defineStore('matrix-client', {\n  state: () => {\n    return {\n      client,\n      getGroups,\n      getOwnProfile,\n      getMembersOfRoom,\n      returnIdOfChildrenInSpace,\n      getChildren,\n      getRoomById,\n      getRoomTimeline,\n      getGroupContent,\n      getChatContent,\n      getSubgroupContent,\n      getMessages,\n      login,\n      sendText,\n      accountData,\n      assignParent,\n      assignChild,\n      createRealGroup,\n      updateChat,\n      getTimeline,\n      createPost,\n      createSubGroup\n    };\n  },\n  getters: {\n    getRooms: state => () => {\n      return state.getRooms();\n    },\n    updateTimeline: state => () => {\n      return updateTimeline();\n    },\n    getRoomState: state => () => {\n      return getRoomState();\n    }\n  },\n  setters: {\n    login: state => () => {\n      return state.login();\n    }\n  }\n});","map":{"version":3,"names":["defineStore","sdk","EventType","convertCompilerOptionsFromJson","loginCreds","accessToken","userId","baseUrl","client","createClient","localClient","createUser","username","password","getHandleFromUserId","replace","getHandleFromRoomId","id","startClient","login","loginWithPassword","then","console","log","getIdentifiedListOfGroups","ids","Object","entries","getRoomTopicFromRoomObject","room","topic","currentState","getStateEvents","JSON","parse","event","content","error","String","getRoomType","roomId","getRoom","type","getRoomName","roomName","name","returnRoomNamesFromRoomObject","rooms","roomNames","map","returnRoomIdsFromRoomObject","roomIds","returnRoomTypeFromRoomObject","roomTypes","getRoomById","group","updateChat","creator","idAndTopicObject","getRoomTimeline","isParent","isChild","getOwnProfile","responseFromServer","getProfileInfo","handle","displayname","getTimeline","roomInitialSync","setArbitraryEvent","eventType","printProfile","messageArray","timeline","forEach","t","push","returnIdOfChildrenInSpace","spaceId","space","childrenMap","relations","events","roomArray","roomChildren","arrayOfRoomIds","childrenIds","Array","from","entry","key","value","getChildren","roomObjects","getGroupContent","groupId","groups","child","children","arrayOfTopics","item","getChatContent","chat","getSubgroupContent","getBoardContent","board","produceHrefAddressesForGroups","getGroups","getRooms","roomNamesAndIdsAsObject","hrefs","roomHandles","roomTopics","roomProduct","i","length","href","assign","createSubSpace","parentSpaceId","subSpaceName","subSpaceTopic","sendStateEvent","via","state_key","canonical","createSpace","groupName","publicorprivate","returnValue","createRoom","visibility","creation_content","response","room_id","catch","createPost","chatSpaceId","newRoom","assignChild","assignParent","subSpaceId","assignParentAndChild","createRealGroup","mainSpace","chatSpace","boardSpace","calendarSpace","juryRig","createSubGroup","parentGroupSpaceId","mainSpaceId","joinGroup","joinRoom","getRoomState","shortlist","shortlistObject","roomState","getMessages","initialSync","sendMessage","message","body","msgtype","sendEvent","err","res","updateTimeline","on","toStartOfTimeline","getType","getMembersOfRoom","members","getMembers","sendText","text","sendTextMessage","accountData","getAccountData","useMatrixClient","state","getters","setters"],"sources":["/Users/observerzero/Project/Dev/icoo/src/stores/MatrixClient.js"],"sourcesContent":["import {defineStore} from 'pinia'\nimport sdk, {EventType} from 'matrix-js-sdk'\nimport { convertCompilerOptionsFromJson } from 'typescript'\n\nconst loginCreds = {\n  //accessToken: \"syt_b2JzZXJ2ZXJ6ZXJv_qbsSNMdGRZpXMsNvXJeX_3OODDh\",\n  accessToken: \"syt_c2lydG91Zw_NskGmfGSoPcYMAeosoHo_0zeoWw\",\n  userId: \"@sirtoug:home.parecon.work\",\n  baseUrl: 'http://localhost:8008'\n}\n\nconst client = sdk.createClient({\n  baseUrl: loginCreds.baseUrl,\n  accessToken: loginCreds.accessToken,\n  userId: loginCreds.userId,\n})\n\nconst localClient = sdk.createClient({\n  baseUrl: loginCreds.baseUrl,\n})\n\nfunction createUser(username, password) {\n  // TODO: Add a room for the user that handles additional user information, such as hashtags, description, images,\n  // TODO - friends lists, following, memberships, etc.\n}\n\nfunction getHandleFromUserId() {\n  return loginCreds.userId.replace(/:.*/, '')\n}\n\nfunction getHandleFromRoomId(id) {\n  return id.replace(/:.*/, '')\n}\n\nclient.startClient()\n\nfunction login() {\n  client.loginWithPassword('username', 'password').then(() => {\n    console.log('Logged in!')\n  })\n}\n\nfunction getIdentifiedListOfGroups(ids) {\n  Object.entries(ids => {\n    console.log(ids.id)\n  })\n}\n\n// GETTERS\n\nfunction getRoomTopicFromRoomObject(room) {\n  let topic = room.currentState.getStateEvents('m.room.topic', '')\n  try {\n    return JSON.parse(topic.event.content.topic)\n  } catch (error) {\n    console.log(error)\n    if (topic == String)\n      return topic\n    return \"We do nothing!\"\n  }\n}\n\nfunction getRoomType(roomId) {\n  let room = client.getRoom(roomId)\n  let type = room.currentState.getStateEvents('m.room.create', '')\n  try {\n    return type.event.content.type\n  } catch (error) {\n    return 'no type for you!!'\n  }\n}\n\nfunction getRoomName(room) {\n  let roomName = room.name\n  return roomName\n}\n\nfunction returnRoomNamesFromRoomObject(rooms) {\n  const roomNames = rooms.map(room => room.name)\n  return roomNames\n}\n\nfunction returnRoomIdsFromRoomObject(rooms) {\n  const roomIds = rooms.map(room => room.roomId)\n  return roomIds\n}\n\nfunction returnRoomTypeFromRoomObject(rooms) {\n  const roomTypes = rooms.map(room => getRoomType(room.id))\n}\n\nasync function getRoomById(roomId) {\n  try {\n    let room = await client.getRoom(roomId)\n    const name = room.name\n    const topic = getRoomTopicFromRoomObject(room)\n    const group = {\n      name: name,\n      topic: topic,\n    }\n    return group\n  } catch (error) {\n    return\n  }\n}\n\nfunction updateChat(roomId) {\n  let room = client.getRoom(roomId)\n  let creator = room.currentState.getStateEvents('m.room.create', '')\n  let idAndTopicObject = {\n    id: roomId,\n    creator: creator.event.content.creator.replace(/:.*/, ''),\n    topic: getRoomTopicFromRoomObject(room),\n    content: getRoomTimeline(roomId),\n  }\n  return idAndTopicObject\n}\n\nfunction isParent() {\n  return\n}\n\nfunction isChild() {\n  return\n}\n\nasync function getOwnProfile() {\n  let responseFromServer = await client.getProfileInfo(loginCreds.userId)\n  responseFromServer.handle = getHandleFromUserId()\n  responseFromServer.displayname = JSON.parse(responseFromServer.displayname)\n  //responseFromServer.events = JSON.parse(responseFromServer.events)\n  console.log(responseFromServer)\n  return responseFromServer\n}\n\nasync function getTimeline(roomId) {\n  return client.roomInitialSync(roomId, 1000)\n}\n\nasync function setArbitraryEvent(roomId, eventType, content) {\n  return\n}\n\nasync function printProfile() {\n  console.log(await client.getProfileInfo(loginCreds.userId))\n}\n\nfunction getRoomTimeline(roomId) {\n  let room = client.getRoom(roomId)\n  let messageArray = []\n  room.timeline.forEach(t => {\n    messageArray.push(t.event)\n  });\n  return messageArray\n}\n\nfunction returnIdOfChildrenInSpace(spaceId) {\n  let space = client.getRoom(spaceId)\n  let childrenMap\n  try {\n    childrenMap = space.relations.room.currentState.events\n  } catch {\n    return\n  }\n  let roomArray = []\n  let roomChildren = []\n  let arrayOfRoomIds = []\n  let childrenIds = []\n  roomArray = Array.from(childrenMap, function (entry) {\n    return {key: entry[0], value: entry[1]};\n  });\n  roomArray.forEach(room => {\n    if (room.key === 'm.space.child') {\n      roomChildren = room.value\n    }\n  })\n  roomArray = Array.from(roomChildren, function (entry) {\n    return {key: entry[0], value: entry[1]};\n  });\n  roomArray.forEach(room => {\n    arrayOfRoomIds.push(room.key)\n  })\n  return arrayOfRoomIds\n}\n\nfunction getChildren(spaceId) {\n  let ids = returnIdOfChildrenInSpace(spaceId)\n  let roomObjects = []\n  ids.forEach(id => {\n    roomObjects.push(client.getRoom(id))\n  })\n  return roomObjects\n}\n\nfunction getGroupContent(groupId) {\n  let content = {}\n  let groups = getChildren(groupId)\n  groups.forEach(child => {\n    if (child != null) {\n      let name = child.name\n      let id = child.roomId\n      let children = getChildren(child.roomId)\n      let arrayOfTopics = []\n      let idAndTopicObject = {}\n      content[name] = {}\n      children.forEach(item => {\n        try {\n          let creator = item.currentState.getStateEvents('m.room.create', '')\n          idAndTopicObject[item.roomId] = {\n            id: item.roomId,\n            creator: creator.event.content.creator.replace(/:.*/, ''),\n            topic: getRoomTopicFromRoomObject(item),\n            content: getRoomTimeline(item.roomId),\n          }\n        } catch {\n          return\n        }\n      })\n      content[name] = {\n        id: id,\n        children: idAndTopicObject,\n      }\n    }\n  })\n  console.log(content)\n  return content\n}\n\nfunction getChatContent(groupId) {\n  let content = getGroupContent(groupId)\n  return content.chat\n}\n\nfunction getSubgroupContent(groupId) {\n  let content = getGroupContent(groupId)\n  return content.groups\n}\n\nfunction getBoardContent(groupId) {\n  let content = getGroupContent(groupId)\n  return content.board\n}\n\nfunction produceHrefAddressesForGroups(rooms) {\n  const roomIds = rooms.map(room => {\n    let id = room.roomId.replace(/:.*/, '')\n    id = id.replace(/!/, '')\n    id = \"/tabs/group/\" + id\n    return id\n  })\n  // roomIds.forEach(roomId => console.log(roomId))\n  return roomIds\n}\n\nfunction getGroups() {\n  let rooms = client.getRooms()\n  let roomNamesAndIdsAsObject = {}\n  let roomNames = returnRoomNamesFromRoomObject(rooms)\n  let roomIds = returnRoomIdsFromRoomObject(rooms)\n  let hrefs = produceHrefAddressesForGroups(rooms)\n  let roomHandles = roomIds.map(roomId => getHandleFromRoomId(roomId))\n  let roomTopics = rooms.map(room => getRoomTopicFromRoomObject(room))\n  let roomTypes = roomIds.map(roomId => getRoomType(roomId))\n  let roomProduct = []\n  for (let i = 0; i < roomNames.length; i++) {\n    roomProduct.push({\n      name: roomNames[i],\n      id: roomIds[i],\n      topic: roomTopics[i],\n      type: roomTypes[i],\n      handle: roomHandles[i],\n      href: hrefs[i],\n    })\n  }\n  Object.assign(roomNamesAndIdsAsObject, roomProduct)\n  return roomNamesAndIdsAsObject\n}\n\n// SETTERS\n\nfunction createSubSpace(parentSpaceId, subSpaceName, subSpaceTopic, roomId) {\n  client.sendStateEvent(roomId, 'm.space.parent', {\n    via: ['home.parecon.work'],\n    state_key: parentSpaceId,\n    canonical: true,\n  })\n  return\n}\n\n// TODO: add type for space or room\nasync function createSpace(groupName, topic, publicorprivate) {\n  let returnValue = await client.createRoom({\n    name: groupName,\n    visibility: 'public',\n    topic: topic,\n    creation_content: {\n      type: 'm.space',\n    }\n  }).then((response) => {\n    console.log(`Room created: ${response.room_id}`)\n    return response.room_id\n    //client.sendStateEvent(response.room_id, 'm.room.create', {room_type: 'm.space'})\n  }).catch((error) => {\n    console.error(`Error creating room: ${error}`)\n  })\n  return returnValue\n}\n\nasync function createRoom(roomName, topic) {\n  let returnValue = await client.createRoom({\n    name: roomName,\n    visibility: 'private',\n    topic: topic,\n  }).then((response) => {\n    console.log(`Room created: ${response.room_id}`)\n    return response.room_id\n  }).catch((error) => {\n    console.error(`Error creating room: ${error}`)\n  })\n  return returnValue\n}\n\nasync function createPost(chatSpaceId, topic) {\n  let newRoom = await createRoom(\"post\", topic)\n  assignChild(chatSpaceId, newRoom)\n  assignParent(newRoom, chatSpaceId)\n  return\n}\n\nfunction assignChild(parentSpaceId, subSpaceId) {\n  client.sendStateEvent(parentSpaceId, 'm.space.child', {\n    via: ['home.parecon.work'],\n  }, subSpaceId).then((error) => {\n    console.log(error)})\n  console.log(\"assigned child\")\n}\n\nfunction assignParent(subSpaceId, parentSpaceId) {\n  client.sendStateEvent(subSpaceId, 'm.space.parent', {\n    canonical: true,\n    via: ['home.parecon.work'],\n  }, parentSpaceId)\n  console.log(\"assigned parent\")\n}\n\nasync function assignParentAndChild(parentSpaceId, subSpaceId) {\n  assignChild(parentSpaceId, subSpaceId)\n  assignParent(subSpaceId, parentSpaceId)\n  return true\n}\n\nasync function createRealGroup(groupName, topic) {\n  // TODO: add rooms that identify group as parent and canonical parent, and add child identifier on the space.\n  // TODO - power levels will hopefully isolate the rooms as necessary to the space.\n  let mainSpace = await createSpace(groupName, '{\"text\": \"' + topic + '\", \"banner\": \"group\"}')\n  let chatSpace = await createSpace(\"chat\", '{\"text\": \"chat\", \"banner\": \"group\"}')\n  let boardSpace = await createSpace(\"board\", '{\"text\": \"board\", \"banner\": \"group\"}')\n  let calendarSpace = await createSpace(\"groups\", '{\"text\": \"groups\", \"banner\": \"group\"}')\n  let juryRig = await assignParentAndChild(mainSpace, chatSpace)\n  juryRig = await assignParentAndChild(mainSpace, boardSpace)\n  juryRig = await assignParentAndChild(mainSpace, calendarSpace)\n  console.log(mainSpace)\n  console.log(chatSpace)\n  console.log(boardSpace)\n  console.log(calendarSpace)\n  return mainSpace\n}\n\nasync function createSubGroup(groupName, topic, parentGroupSpaceId) {\n  let mainSpaceId = await createRealGroup(groupName, topic)\n  assignParentAndChild(parentGroupSpaceId, mainSpaceId)\n  return\n}\n\nfunction joinGroup(groupId) {\n  client.joinRoom(groupId).then((response) => {\n    // meh\n  }).catch((error) => {\n    // meh\n  })\n}\n\nasync function getRoomState() {\n  let shortlist = []\n  let shortlistObject = {}\n  let response = await client.roomState(\"!OGEhHVWSdvArJzumhm:matrix.org\")\n    .then((response) => {\n      for (let i = 0; i < 100; i++) {\n        shortlist.push(response[i])\n        Object.assign(shortlistObject, shortlist)\n      }\n      return shortlistObject\n    })\n  return response\n}\n\nasync function getMessages(roomId) {\n  client.initialSync(roomId).then((response) => {\n    const timeline = response.timeline;\n    // Do something with the timeline, such as render it in a chat interface\n  }).catch((error) => {\n    console.error(`Error fetching initial sync for room ${roomId}: ${error}`);\n  })\n}\n\nfunction sendMessage(roomId, message) {\n  const content = {\n    body: \"A hobbit trying to scale mount everest\",\n    msgtype: \"m.text\",\n  }\n  client.sendEvent(\"roomId\", \"m.room.message\", content, \"\", (err, res) => {\n    console.log(err)\n  })\n}\n\nfunction updateTimeline(roomId) {\n  //client.on(\"Room.timeline\", function (event, room, toStartOfTimeline) {\n  //  if (toStartOfTimeline) {\n  //    var messageToAppend = room.timeline[room.timeline.length - 1]\n  //    return messageToAppend\n  //  }\n  //})\n  client.on(\"Room.timeline\", function (event, room, toStartOfTimeline) {\n    if (event.getType() !== \"m.room.message\") {\n        return; // only use messages\n    }\n    console.log(event.event.content.body);\n});\n}\n\nasync function getMembersOfRoom(roomId) {\n  let room = await client.getRoom(roomId)\n  let members = room.getMembers()\n  return members\n}\n\nfunction sendText(roomId, text) {\n  client.sendTextMessage(roomId, text)\n}\n\nfunction accountData() {\n  return client.getAccountData()\n}\n\n// TODO - Add a getter to get a room's timeline\n// TODO - Get a filter to get a group's associated groups\n// TODO -\n// TODO: Ranking functionality of group membership to curate what appears on top\n// TODO - of the list on group profile. Use the \"suggested\" value of space children\n// TODO - to determine whether the rooms are considered important. Canonical parent\n// TODO - is also useful\n\nexport const useMatrixClient = defineStore('matrix-client', {\n  state: () => {\n    return ({\n      client,\n      getGroups,\n      getOwnProfile,\n      getMembersOfRoom,\n      returnIdOfChildrenInSpace,\n      getChildren,\n      getRoomById,\n      getRoomTimeline,\n      getGroupContent,\n      getChatContent,\n      getSubgroupContent,\n      getMessages,\n      login,\n      sendText,\n      accountData,\n      assignParent,\n      assignChild,\n      createRealGroup,\n      updateChat,\n      getTimeline,\n      createPost,\n      createSubGroup,\n    })\n  },\n  getters: {\n    getRooms: (state) => () => {\n      return state.getRooms()\n    },\n    updateTimeline: (state) => () => {\n      return updateTimeline()\n    },\n    getRoomState: (state) => () => {\n      return getRoomState()\n    },\n  },\n  setters: {\n    login: (state) => () => {\n      return state.login()\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}