{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_IonCardHeader = _resolveComponent(\"IonCardHeader\");\n  const _component_ion_button = _resolveComponent(\"ion-button\");\n  const _component_IonCard = _resolveComponent(\"IonCard\");\n  const _component_IonButton = _resolveComponent(\"IonButton\");\n  const _component_IonButtons = _resolveComponent(\"IonButtons\");\n  const _component_IonTitle = _resolveComponent(\"IonTitle\");\n  const _component_IonToolbar = _resolveComponent(\"IonToolbar\");\n  const _component_IonHeader = _resolveComponent(\"IonHeader\");\n  const _component_IonLabel = _resolveComponent(\"IonLabel\");\n  const _component_IonInput = _resolveComponent(\"IonInput\");\n  const _component_IonItem = _resolveComponent(\"IonItem\");\n  const _component_IonModal = _resolveComponent(\"IonModal\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"  <IonList>\"), _createCommentVNode(\"    <IonList v-for=\\\"message in messages\\\" v-bind:key=\\\"message\\\">\"), _createCommentVNode(\"      <IonItem id=\\\"open-modal\\\" expand=\\\"block\\\">\"), _createCommentVNode(\"        wow\"), _createCommentVNode(\"      </IonItem>\"), _createCommentVNode(\"    </IonList>\"), _createCommentVNode(\"  </IonList>\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.content, (value, key) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: key\n    }, [_createVNode(_component_IonCard, {\n      onClick: $event => $options.openModal(value)\n    }, {\n      default: _withCtx(() => [_createVNode(_component_IonCardHeader, null, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(value) + \" \" + _toDisplayString(key), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_ion_button, {\n        fill: \"clear\",\n        onClick: $event => $options.openModal(value)\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"open chat\")]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]), _createVNode(_component_ion_button, {\n        fill: \"clear\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"follow\")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_IonModal, {\n    ref: \"modal\",\n    trigger: \"open-modal\",\n    onWillDismiss: $options.onWillDismiss\n  }, {\n    default: _withCtx(() => [_createVNode(_component_IonHeader, null, {\n      default: _withCtx(() => [_createVNode(_component_IonToolbar, null, {\n        default: _withCtx(() => [_createVNode(_component_IonButtons, {\n          slot: \"start\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_IonButton, {\n            onClick: _cache[0] || (_cache[0] = $event => $options.cancel())\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Cancel\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_IonTitle, null, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.messages), 1 /* TEXT */)]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_IonButtons, {\n          slot: \"end\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_IonButton, {\n            strong: true,\n            onClick: _cache[1] || (_cache[1] = $event => $options.confirm())\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Conwhat\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), _createVNode(_component_IonItem, null, {\n      default: _withCtx(() => [_createVNode(_component_IonLabel, {\n        position: \"stacked\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"Enter your name\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_IonInput, {\n        ref: \"input\",\n        type: \"text\",\n        placeholder: \"Your name\"\n      }, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onWillDismiss\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;6DACIA,kCAAkB,EAClBA,yFAAqE,EACrEA,yEAAqD,EACrDA,kCAAkB,EAClBA,uCAAuB,EACvBA,qCAAqB,EACrBA,mCAAmB,qBACnBC,oBAMMC,6BANoBC,aAAO,GAArBC,KAAK,EAAEC,GAAG;yBAAtBJ,oBAMM;MANoCI,GAAG,EAAEA;IAAG,IAChDC,aAIUC;MAJAC,OAAK,YAAEC,kBAAS,CAACL,KAAK;;wBAC9B,MAAoD,CAApDE,aAAoDI;0BAArC,MAAW,mCAARN,KAAK,IAAG,GAAC,oBAAGC,GAAG;;;oCACnCC,aAAyEK;QAA7DC,IAAI,EAAC,OAAO;QAAEJ,OAAK,YAAEC,kBAAS,CAACL,KAAK;;0BAAG,MAAS,kBAAT,WAAS;;wDAC9DE,aAA4CK;QAAhCC,IAAI,EAAC;MAAO;0BAAC,MAAM,kBAAN,QAAM;;;;;;kCAIjCN,aAgBWO;IAhBDC,GAAG,EAAC,OAAO;IAACC,OAAO,EAAC,YAAY;IAAEC,aAAW,EAAEP;;sBACvD,MAUY,CAVZH,aAUYW;wBATV,MAQa,CARbX,aAQaY;0BAPX,MAEa,CAFbZ,aAEaa;UAFDC,IAAI,EAAC;QAAO;4BACtB,MAA+C,CAA/Cd,aAA+Ce;YAAnCb,OAAK,sCAAEC,eAAM;;8BAAI,MAAM,kBAAN,QAAM;;;;;YAErCH,aAAmCgB;4BAAzB,MAAc,mCAAXC,aAAQ;;;YACrBjB,aAEaa;UAFDC,IAAI,EAAC;QAAK;4BACpB,MAAgE,CAAhEd,aAAgEe;YAApDG,MAAM,EAAE,IAAI;YAAGhB,OAAK,sCAAEC,gBAAO;;8BAAI,MAAO,kBAAP,SAAO;;;;;;;;;;;QAI1DH,aAGUmB;wBAFR,MAAuD,CAAvDnB,aAAuDoB;QAA7CC,QAAQ,EAAC;MAAS;0BAAC,MAAe,kBAAf,iBAAe;;UAC5CrB,aAAqEsB;QAA3Dd,GAAG,EAAC,OAAO;QAACe,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC","names":["_createCommentVNode","_createElementBlock","_Fragment","$data","value","key","_createVNode","_component_IonCard","onClick","$options","_component_IonCardHeader","_component_ion_button","fill","_component_IonModal","ref","trigger","onWillDismiss","_component_IonHeader","_component_IonToolbar","_component_IonButtons","slot","_component_IonButton","_component_IonTitle","_ctx","strong","_component_IonItem","_component_IonLabel","position","_component_IonInput","type","placeholder"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n    <!--  <IonList>-->\n    <!--    <IonList v-for=\"message in messages\" v-bind:key=\"message\">-->\n    <!--      <IonItem id=\"open-modal\" expand=\"block\">-->\n    <!--        wow-->\n    <!--      </IonItem>-->\n    <!--    </IonList>-->\n    <!--  </IonList>-->\n    <div v-for=\"value, key in content\" v-bind:key=\"key\">\n      <IonCard @click=\"openModal(value)\">\n        <IonCardHeader>{{ value }} {{ key }}</IonCardHeader>\n      <ion-button fill=\"clear\" @click=\"openModal(value)\">open chat</ion-button>\n    <ion-button fill=\"clear\">follow</ion-button>\n      </IonCard>\n    </div>\n\n  <IonModal ref=\"modal\" trigger=\"open-modal\" @willDismiss=\"onWillDismiss\">\n    <IonHeader>\n      <IonToolbar>\n        <IonButtons slot=\"start\">\n          <IonButton @click=\"cancel()\">Cancel</IonButton>\n        </IonButtons>\n        <IonTitle>{{ messages }}</IonTitle>\n        <IonButtons slot=\"end\">\n          <IonButton :strong=\"true\" @click=\"confirm()\">Conwhat</IonButton>\n        </IonButtons>\n      </IonToolbar>\n    </IonHeader>\n    <IonItem>\n      <IonLabel position=\"stacked\">Enter your name</IonLabel>\n      <IonInput ref=\"input\" type=\"text\" placeholder=\"Your name\"></IonInput>\n    </IonItem>\n  </IonModal>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n} from '@ionic/vue';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport {useCrossPage} from \"@/stores/CrossPageUpdates\";\nimport Modal from \"@/menus/Modal.vue\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\n\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\n\nlet content = ref({})\nlet chats = ref({})\n\nsetInterval(async () => {\n  try {\n    content = await client.getChatContent(this.groupId)\n  } catch {\n    return\n  }\n  console.log(content)\n}, 2000);\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n      content,\n      chats,\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n  },\n  props: {\n    groupId: String,\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n\n    async openModal(topic) {\n      let thaTopic = topic;\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          message: thaTopic,\n        }\n      });\n      await modal.present();\n\n      const {data, role} = await modal.onWillDismiss();\n\n      if (role === 'confirm') {\n        console.log(\"sure thing\")\n      }\n    },\n\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(this.groupId)\n        } catch {\n          return\n        }\n      }, 2000);\n    },\n  },\n\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}