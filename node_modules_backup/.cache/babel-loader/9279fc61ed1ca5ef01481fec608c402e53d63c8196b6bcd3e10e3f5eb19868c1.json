{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ChatItem = _resolveComponent(\"ChatItem\");\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.content, value => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: value\n    }, [_createVNode(_component_ChatItem, {\n      message: value\n    }, null, 8 /* PROPS */, [\"message\"])]);\n  }), 128 /* KEYED_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;2BAEEA,oBAEMC,6BAFeC,aAAO,EAAhBC,KAAK;yBAAjBH,oBAEM;MAF+BI,GAAG,EAAED;IAAK,IAC7CE,aAA4BC;MAAjBC,OAAO,EAAEJ;IAAK","names":["_createElementBlock","_Fragment","$data","value","key","_createVNode","_component_ChatItem","message"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n\n  <div v-for=\"value in content\" v-bind:key=\"value\">\n    <ChatItem :message=\"value\"/>\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n} from '@ionic/vue';\nimport {\n  arrowBack,\n  chevronUpCircle,\n  add,\n  menu,\n  close,\n  search,\n  personCircle,\n  addCircle,\n  bulb,\n  caretUp,\n  peopleCircle,\n  chatbox,\n  colorFilter,\n  colorFilterSharp,\n  clipboard,\n} from 'ionicons/icons';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport {useCrossPage} from \"@/stores/CrossPageUpdates\";\nimport Modal from \"@/menus/Modal.vue\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\n\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\n\nlet content = ref({})\nlet chats = ref({})\n\nsetInterval(async () => {\n  try {\n    content.value = await client.getChatContent(this.groupId)\n  } catch {\n    return\n  }\n  console.log(content)\n}, 2000);\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n      content,\n      chats,\n      addCircle,\n      add,\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n  },\n  props: {\n    groupId: String,\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n\n    async openModal(topic) {\n      let thaTopic = topic;\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          message: thaTopic,\n        }\n      });\n      await modal.present();\n\n      const {data, role} = await modal.onWillDismiss();\n\n      if (role === 'confirm') {\n        console.log(\"sure thing\")\n      }\n    },\n\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(this.groupId)\n        } catch {\n          return\n        }\n      }, 2000);\n    },\n  },\n\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}