{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/* eslint-disable vue/no-unused-components */\nimport { IonItem, IonCardHeader, IonCardContent, IonList, IonButton, IonButtons, IonCardTitle, IonChip, IonAvatar, IonCard, IonLabel, modalController, IonModal, IonToolbar, IonSearchbar, IonBadge, IonHeader, IonContent, IonIcon } from '@ionic/vue';\nimport { defineComponent, reactive, ref } from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport { useCrossPage } from \"@/stores/CrossPageUpdates\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\nlet content = ref({});\nlet chats = ref({});\nlet timeline = ref({});\nexport default {\n  name: \"ChatItem\",\n  data() {\n    return {};\n  },\n  props: {\n    message: Object\n  },\n  components: {\n    IonCardContent,\n    IonAvatar,\n    IonItem,\n    IonCard,\n    IonLabel,\n    IonCardHeader,\n    modalController,\n    IonChip,\n    IonModal,\n    IonButton,\n    IonButtons,\n    IonToolbar,\n    IonSearchbar,\n    IonBadge,\n    IonHeader,\n    IonContent,\n    IonIcon\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        return;\n      }\n    },\n    async openModal(topic) {\n      let thaTopic = topic;\n      thaTopic.creator = topic.creator.replace(/:.*/, '');\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          message: thaTopic\n        }\n      });\n      await modal.present();\n      const {\n        data,\n        role\n      } = await modal.onWillDismiss();\n      if (role === 'confirm') {\n        console.log(\"sure thing\");\n      }\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(Object.keys(this.thaTopic));\n        } catch (_unused) {\n          return;\n        }\n      }, 2000);\n    }\n  },\n  created() {\n    this.$watch(() => this.$route.params, () => {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      this.fetchData();\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n};","map":{"version":3,"mappings":"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","names":["IonItem","IonCardHeader","IonCardContent","IonList","IonButton","IonButtons","IonCardTitle","IonChip","IonAvatar","IonCard","IonLabel","modalController","IonModal","IonToolbar","IonSearchbar","IonBadge","IonHeader","IonContent","IonIcon","defineComponent","reactive","ref","useMatrixClient","useCrossPage","ChatModal","client","crossPage","content","chats","timeline","name","data","props","message","Object","components","methods","cancel","$refs","modal","$el","dismiss","confirm","input","value","onWillDismiss","ev","detail","role","openModal","topic","thaTopic","creator","replace","create","component","componentProps","present","console","log","fetchData","id","$route","params","setInterval","getChatContent","keys","created","$watch","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/ChatItem.vue"],"sourcesContent":["<template>\n    <IonCard>\n      <IonCardHeader>\n        <IonItem href=\"/tabs/profile\">\n          <IonAvatar>\n            <img alt=\"Person\" src=\"../../public/assets/banners/hacker_soft_colors.png\" />\n          </IonAvatar>\n          <IonLabel style=\"margin-left: 1em;\">\n            {{ message.creator }}\n          </IonLabel>\n        </IonItem>\n      </IonCardHeader>\n      <IonCardContent @click=\"openModal(message)\">{{ message.topic.text }}</IonCardContent>\n    </IonCard>\n\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonItem,\n  IonCardHeader,\n  IonCardContent,\n  IonList,\n  IonButton,\n  IonButtons,\n  IonCardTitle,\n  IonChip,\n  IonAvatar, \n  IonCard, \n  IonLabel,\n  modalController,\n  IonModal,\n  IonToolbar,\n  IonSearchbar,\n  IonBadge,\n  IonHeader,\n  IonContent,\n  IonIcon,\n} from '@ionic/vue';\n\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport {useCrossPage} from \"@/stores/CrossPageUpdates\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\n\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\n\nlet content = ref({})\nlet chats = ref({})\nlet timeline = ref({})\n\nexport default {\n  name: \"ChatItem\",\n  data() {\n    return {\n    }\n  },\n  props: {\n    message: Object,\n  },\n  components: {\n    IonCardContent,\n    IonAvatar,\n    IonItem,\n    IonCard,\n    IonLabel,\n    IonCardHeader,\n    modalController,\n    IonChip,\n    IonModal,\n    IonButton,\n    IonButtons,\n    IonToolbar,\n    IonSearchbar,\n    IonBadge,\n    IonHeader,\n    IonContent,\n    IonIcon,\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        return\n      }\n    },\n\n    async openModal(topic) {\n      let thaTopic = topic;\n      thaTopic.creator = topic.creator.replace(/:.*/, '');\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          message: thaTopic,\n        }\n      });\n      await modal.present();\n\n      const {data, role} = await modal.onWillDismiss();\n\n      if (role === 'confirm') {\n        console.log(\"sure thing\")\n      }\n    },\n\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(Object.keys(this.thaTopic))\n        } catch {\n          return\n        }\n      }, 2000);\n    },\n  },\n  created() {\n    this.$watch(\n      () => this.$route.params,\n      () => {\n        const id = \"!\" + this.$route.params.id + \":matrix.org\";\n        this.fetchData()\n      },\n      // fetch the data when the view is created and the data is\n      // already being observed\n      { immediate: true }\n    )\n  },\n}\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}