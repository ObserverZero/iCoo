{"ast":null,"code":"/* eslint-disable vue/no-unused-components */\nimport { IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonIcon, IonCardContent, IonList, IonItem, modalController, IonModal, IonHeader, IonToolbar, IonButtons, IonButton, IonSearchbar, IonTitle, IonContent, IonInput, IonLabel } from '@ionic/vue';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport { defineComponent, reactive } from 'vue';\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {};\n  },\n  setup() {\n    return {};\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel\n  },\n  props: {\n    content: Array,\n    groupId: String\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        this.content = await client.getGroupContent(groupId);\n      }, 1000);\n    }\n  },\n  created() {\n    this.$watch(() => this.$route.params, () => {\n      this.fetchData();\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n};","map":{"version":3,"mappings":"AA8BA;AACA,SACEA,OAAO,EACPC,aAAa,EACbC,eAAe,EACfC,YAAY,EACZC,OAAO,EACPC,cAAc,EACdC,OAAO,EACPC,OAAO,EACPC,eAAe,EACfC,QAAQ,EACRC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,SAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,UAAU,EACVC,QAAQ,EACRC,QAAQ,QACH,YAAY;AACnB,OAAOC,QAAO,MAAO,2BAA2B;AAChD,SAAQC,eAAe,EAAEC,QAAQ,QAAO,KAAK;AAE7C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAI,GAAG;IACL,OAAO,CACP;EACF,CAAC;EACDC,KAAK,GAAG;IACN,OAAO,CAAC;EACV,CAAC;EACDC,UAAU,EAAE;IACVN,QAAQ;IACRnB,OAAO;IACPC,aAAa;IACbC,eAAe;IACfC,YAAY;IACZC,OAAO;IACPC,cAAc;IACdC,OAAO;IACPC,OAAO;IACPC,eAAe;IACfC,QAAQ;IACRC,SAAS;IACTC,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,YAAY;IACZC,QAAQ;IACRC,UAAU;IACVC,QAAQ;IACRC;EACF,CAAC;EACDQ,KAAK,EAAE;IACLC,OAAO,EAAEC,KAAK;IACdC,OAAO,EAAEC;EACX,CAAC;EACDC,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC9C,CAAC;IACDC,OAAO,GAAG;MACR,MAAMf,IAAG,GAAI,IAAI,CAACW,KAAK,CAACK,KAAK,CAACH,GAAG,CAACI,KAAK;MACvC,IAAI,CAACN,KAAK,CAACC,KAAK,CAACC,GAAG,CAACC,OAAO,CAACd,IAAI,EAAE,SAAS,CAAC;IAC/C,CAAC;IACDkB,aAAa,CAACC,EAAE,EAAE;MAChB,IAAIA,EAAE,CAACC,MAAM,CAACC,IAAG,KAAM,SAAS,EAAE;QAChC,IAAI,CAACC,OAAM,GAAK,UAASH,EAAE,CAACC,MAAM,CAACnB,IAAK,GAAE;MAC5C;IACF,CAAC;IACD,MAAMsB,SAAS,GAAG;MAChB,MAAMC,EAAC,GAAI,GAAE,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,EAAC,GAAI,aAAa;MACtDG,WAAW,CAAC,YAAY;QACtB,IAAI,CAACtB,OAAM,GAAI,MAAMuB,MAAM,CAACC,eAAe,CAACtB,OAAO;MACrD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EACDuB,OAAO,GAAG;IACR,IAAI,CAACC,MAAM,CACP,MAAM,IAAI,CAACN,MAAM,CAACC,MAAM,EACxB,MAAM;MACJ,IAAI,CAACH,SAAS,EAAC;IACjB,CAAC;IACD;IACA;IACA;MAACS,SAAS,EAAE;IAAI,EACpB;EACF;AACF","names":["IonCard","IonCardHeader","IonCardSubtitle","IonCardTitle","IonIcon","IonCardContent","IonList","IonItem","modalController","IonModal","IonHeader","IonToolbar","IonButtons","IonButton","IonSearchbar","IonTitle","IonContent","IonInput","IonLabel","ChatItem","defineComponent","reactive","name","data","setup","components","props","content","Array","groupId","String","methods","cancel","$refs","modal","$el","dismiss","confirm","input","value","onWillDismiss","ev","detail","role","message","fetchData","id","$route","params","setInterval","client","getGroupContent","created","$watch","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n  <!--  <IonList>-->\n  <!--    <IonList v-for=\"message in messages\" v-bind:key=\"message\">-->\n  <!--      <IonItem id=\"open-modal\" expand=\"block\">-->\n  <!--        wow-->\n  <!--      </IonItem>-->\n  <!--    </IonList>-->\n  <!--  </IonList>-->\n  <IonItem>ok, so... {{ content }}</IonItem>\n\n  <IonModal ref=\"modal\" trigger=\"open-modal\" @willDismiss=\"onWillDismiss\">\n    <IonHeader>\n      <IonToolbar>\n        <IonButtons slot=\"start\">\n          <IonButton @click=\"cancel()\">Cancel</IonButton>\n        </IonButtons>\n        <IonTitle>{{ messages }}</IonTitle>\n        <IonButtons slot=\"end\">\n          <IonButton :strong=\"true\" @click=\"confirm()\">Confirm</IonButton>\n        </IonButtons>\n      </IonToolbar>\n    </IonHeader>\n    <IonItem>\n      <IonLabel position=\"stacked\">Enter your name</IonLabel>\n      <IonInput ref=\"input\" type=\"text\" placeholder=\"Your name\"></IonInput>\n    </IonItem>\n  </IonModal>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n} from '@ionic/vue';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive} from 'vue';\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n  },\n  props: {\n    content: Array,\n    groupId: String,\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        this.content = await client.getGroupContent(groupId)\n      }, 1000);\n    },\n  },\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}