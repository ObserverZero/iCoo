{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport sdk, { EventType } from 'matrix-js-sdk';\nconst loginCreds = {\n  accessToken: \"syt_b2JzZXJ2ZXJ6ZXJv_qbsSNMdGRZpXMsNvXJeX_3OODDh\",\n  userId: \"@observerzero:matrix.org\",\n  baseUrl: 'https://matrix.org'\n};\nconst client = sdk.createClient({\n  baseUrl: loginCreds.baseUrl,\n  accessToken: loginCreds.accessToken,\n  userId: loginCreds.userId\n});\nclient.startClient();\nfunction login() {\n  client.loginWithPassword('username', 'password').then(function () {\n    console.log('Logged in!');\n  });\n}\n\n// GETTERS\n\nfunction getRoomTopic(roomId) {\n  let room = client.getRoom(roomId);\n  let topic = room.currentState.getStateEvents('m.room.topic', '');\n  try {\n    return topic.event.content.topic;\n  } catch (error) {\n    return 'We do nothing!';\n  }\n}\nfunction returnRoomNamesFromRoomObject(rooms) {\n  const roomNames = rooms.map(room => room.name);\n  return roomNames;\n}\nfunction returnRoomIdsFromRoomObject(rooms) {\n  const roomIds = rooms.map(room => room.roomId);\n  return roomIds;\n}\nfunction returnRoomTypeFromRoomObject(rooms) {\n  const roomType = room.getRoomT;\n}\nfunction getGroups() {\n  let rooms = client.getRooms();\n  let roomNamesAndIdsAsObject = {};\n  let roomNames = returnRoomNamesFromRoomObject(rooms);\n  let roomIds = returnRoomIdsFromRoomObject(rooms);\n  let roomTopics = roomIds.map(roomId => getRoomTopic(roomId));\n  let roomProduct = [];\n  for (let i = 0; i < roomNames.length; i++) {\n    roomProduct.push({\n      name: roomNames[i],\n      id: roomIds[i],\n      topic: roomTopics[i]\n    });\n  }\n  Object.assign(roomNamesAndIdsAsObject, roomProduct);\n  // console.log(roomNamesAndIdsAsObject)\n  return roomNamesAndIdsAsObject;\n}\n\n// SETTERS\n\nfunction setRoomType(checked) {\n  if (checked) {\n    return 'm.space';\n  } else {\n    return 'm.room';\n  }\n}\n\n// TODO: add type for space or room\nfunction createGroup(groupName, topic, type) {\n  client.createRoom({\n    name: groupName,\n    visibility: 'private',\n    topic: topic,\n    room_type: 'm.space'\n  }).then(response => {\n    console.log(type);\n    console.log(`Room created: ${response.room_id}`);\n  }).catch(error => {\n    console.error(`Error creating room: ${error}`);\n  });\n}\n\n//TODO - Add a getter to get a room's timeline\n//TODO - Add a getter to get a room's type\n\nexport const useMatrixClient = defineStore('matrix-client', {\n  state: () => {\n    return {\n      client: client,\n      getGroups: getGroups,\n      createGroup: createGroup,\n      login: login\n    };\n  },\n  getters: {\n    getRooms: state => () => {\n      return state.getRooms();\n    },\n    getRoomNamesAndIds: state => () => {\n      return state.getGroups();\n    }\n  },\n  setters: {\n    createGroup: state => groupName => {\n      return state.createGroup(groupName);\n    },\n    login: state => () => {\n      return state.login();\n    }\n  }\n});","map":{"version":3,"names":["defineStore","sdk","EventType","loginCreds","accessToken","userId","baseUrl","client","createClient","startClient","login","loginWithPassword","then","console","log","getRoomTopic","roomId","room","getRoom","topic","currentState","getStateEvents","event","content","error","returnRoomNamesFromRoomObject","rooms","roomNames","map","name","returnRoomIdsFromRoomObject","roomIds","returnRoomTypeFromRoomObject","roomType","getRoomT","getGroups","getRooms","roomNamesAndIdsAsObject","roomTopics","roomProduct","i","length","push","id","Object","assign","setRoomType","checked","createGroup","groupName","type","createRoom","visibility","room_type","response","room_id","catch","useMatrixClient","state","getters","getRoomNamesAndIds","setters"],"sources":["/Users/observerzero/Project/Dev/icoo/src/stores/MatrixClient.js"],"sourcesContent":["import {defineStore} from 'pinia';\nimport sdk, {EventType} from 'matrix-js-sdk';\n\nconst loginCreds = {\n  accessToken: \"syt_b2JzZXJ2ZXJ6ZXJv_qbsSNMdGRZpXMsNvXJeX_3OODDh\",\n  userId: \"@observerzero:matrix.org\",\n  baseUrl: 'https://matrix.org'\n}\nconst client = sdk.createClient({\n  baseUrl: loginCreds.baseUrl,\n  accessToken: loginCreds.accessToken,\n  userId: loginCreds.userId,\n});\n\nclient.startClient();\n\nfunction login() {\n  client.loginWithPassword('username', 'password').then(function () {\n    console.log('Logged in!')\n  })\n}\n\n// GETTERS\n\nfunction getRoomTopic(roomId) {\n  let room = client.getRoom(roomId);\n  let topic = room.currentState.getStateEvents('m.room.topic', '');\n  try {\n    return topic.event.content.topic;\n  } catch (error) {\n    return 'We do nothing!';\n  }\n}\n\nfunction returnRoomNamesFromRoomObject(rooms) {\n  const roomNames = rooms.map(room => room.name);\n  return roomNames;\n}\n\nfunction returnRoomIdsFromRoomObject(rooms) {\n  const roomIds = rooms.map(room => room.roomId);\n  return roomIds;\n}\n\nfunction returnRoomTypeFromRoomObject(rooms) {\n  const roomType = room.getRoomT\n}\n\nfunction getGroups() {\n  let rooms = client.getRooms()\n  let roomNamesAndIdsAsObject = {};\n  let roomNames = returnRoomNamesFromRoomObject(rooms)\n  let roomIds = returnRoomIdsFromRoomObject(rooms);\n  let roomTopics = roomIds.map(roomId => getRoomTopic(roomId));\n  let roomProduct = [];\n  for (let i = 0; i < roomNames.length; i++) {\n    roomProduct.push({\n      name: roomNames[i],\n      id: roomIds[i],\n      topic: roomTopics[i],\n    })\n  }\n  Object.assign(roomNamesAndIdsAsObject, roomProduct)\n  // console.log(roomNamesAndIdsAsObject)\n  return roomNamesAndIdsAsObject;\n}\n\n// SETTERS\n\nfunction setRoomType(checked) {\n  if (checked) {\n    return 'm.space';\n  } else {\n    return 'm.room';\n  }\n}\n\n// TODO: add type for space or room\nfunction createGroup(groupName, topic, type) {\n  client.createRoom({\n    name: groupName,\n    visibility: 'private',\n    topic: topic,\n    room_type: 'm.space',\n  }).then((response) => {\n    console.log(type);\n    console.log(`Room created: ${response.room_id}`);\n  }).catch((error) => {\n    console.error(`Error creating room: ${error}`);\n  });\n}\n\n//TODO - Add a getter to get a room's timeline\n//TODO - Add a getter to get a room's type\n\nexport const useMatrixClient = defineStore('matrix-client', {\n  state: () => {\n    return ({\n      client: client,\n      getGroups: getGroups,\n      createGroup: createGroup,\n      login: login,\n    });\n  },\n  getters: {\n    getRooms: (state) => () => {\n      return state.getRooms();\n    },\n    getRoomNamesAndIds: (state) => () => {\n      return state.getGroups();\n    },\n  },\n  setters: {\n    createGroup: (state) => (groupName) => {\n      return state.createGroup(groupName);\n    },\n    login: (state) => () => {\n      return state.login();\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}