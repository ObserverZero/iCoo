{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ChatItem = _resolveComponent(\"ChatItem\");\n  const _component_IonIcon = _resolveComponent(\"IonIcon\");\n  const _component_IonFabButton = _resolveComponent(\"IonFabButton\");\n  const _component_IonFabList = _resolveComponent(\"IonFabList\");\n  const _component_IonFab = _resolveComponent(\"IonFab\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.content, value => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: value\n    }, [_createVNode(_component_ChatItem, {\n      message: value\n    }, null, 8 /* PROPS */, [\"message\"])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_IonFab, {\n    slot: \"fixed\",\n    vertical: \"bottom\",\n    horizontal: \"end\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_IonFabButton, {\n      color: \"dark\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_IonIcon, {\n        icon: $data.chatbox\n      }, null, 8 /* PROPS */, [\"icon\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_IonFabList, {\n      side: \"top\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_IonFabButton, {\n        onClick: _ctx.yup\n      }, {\n        default: _withCtx(() => [_createVNode(_component_IonIcon, {\n          icon: _ctx.colorFilterSharp,\n          color: \"tertiary\"\n        }, null, 8 /* PROPS */, [\"icon\"])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_IonFabButton, null, {\n        default: _withCtx(() => [_createVNode(_component_IonIcon, {\n          icon: _ctx.clipboard,\n          color: \"tertiary\"\n        }, null, 8 /* PROPS */, [\"icon\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_IonFabButton, null, {\n        default: _withCtx(() => [_createVNode(_component_IonIcon, {\n          icon: $data.chatbox,\n          color: \"tertiary\"\n        }, null, 8 /* PROPS */, [\"icon\"])]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;;;gFAEEA,oBAEMC,6BAFeC,aAAO,EAAhBC,KAAK;yBAAjBH,oBAEM;MAF+BI,GAAG,EAAED;IAAK,IAC7CE,aAA4BC;MAAjBC,OAAO,EAAEJ;IAAK;kCAG3BE,aAeSG;IAfDC,IAAI,EAAC,OAAO;IAACC,QAAQ,EAAC,QAAQ;IAACC,UAAU,EAAC;;sBAChD,MAEe,CAFfN,aAEeO;MAFDC,KAAK,EAAC;IAAM;wBACxB,MAAmC,CAAnCR,aAAmCS;QAAzBC,IAAI,EAAEb;MAAO;;QAEzBG,aAUaW;MAVDC,IAAI,EAAC;IAAK;wBACpB,MAEe,CAFfZ,aAEeO;QAFAM,OAAK,EAAEC;MAAG;0BACvB,MAAoD,CAApDd,aAAoDS;UAA1CC,IAAI,EAAEI,qBAAgB;UAAEN,KAAK,EAAC;;;sCAE1CR,aAEeO;0BADb,MAAsD,CAAtDP,aAAsDS;UAA5CC,IAAI,EAAEI,cAAS;UAAEN,KAAK,EAAC;;;UAEnCR,aAEeO;0BADb,MAAoD,CAApDP,aAAoDS;UAA1CC,IAAI,EAAEb,aAAO;UAAEW,KAAK,EAAC","names":["_createElementBlock","_Fragment","$data","value","key","_createVNode","_component_ChatItem","message","_component_IonFab","slot","vertical","horizontal","_component_IonFabButton","color","_component_IonIcon","icon","_component_IonFabList","side","onClick","_ctx"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n\n  <div v-for=\"value in content\" v-bind:key=\"value\">\n    <ChatItem :message=\"value\"/>\n  </div>\n\n  <IonFab slot=\"fixed\" vertical=\"bottom\" horizontal=\"end\">\n    <IonFabButton color=\"dark\">\n      <IonIcon :icon=\"chatbox\"></IonIcon>\n    </IonFabButton>\n    <IonFabList side=\"top\">\n      <IonFabButton @click=\"yup\">\n        <IonIcon :icon=\"colorFilterSharp\" color=\"tertiary\"/>\n      </IonFabButton>\n      <IonFabButton>\n        <IonIcon :icon=\"clipboard\" color=\"tertiary\"></IonIcon>\n      </IonFabButton>\n      <IonFabButton>\n        <IonIcon :icon=\"chatbox\" color=\"tertiary\"></IonIcon>\n      </IonFabButton>\n    </IonFabList>\n  </IonFab>\n\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n  IonFab,\n  IonFabButton,\n  IonFabList,\n} from '@ionic/vue';\nimport {\n  arrowBack,\n  chevronUpCircle,\n  add,\n  menu,\n  close,\n  search,\n  personCircle,\n  addCircle,\n  bulb,\n  caretUp,\n  peopleCircle,\n  chatbox,\n  colorFilter,\n  colorFilterSharp,\n  clipboard,\n} from 'ionicons/icons';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport {useCrossPage} from \"@/stores/CrossPageUpdates\";\nimport Modal from \"@/menus/Modal.vue\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\n\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\n\nlet content = ref({})\nlet chats = ref({})\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n      content,\n      chats,\n      addCircle,\n      add,\n      chatbox,\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n    IonFab,\n    IonFabButton,\n    IonFabList,\n  },\n  props: {\n    groupId: String,\n  },\n  methods: {\n\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(this.groupId)\n        } catch {\n          return\n        }\n      }, 2000);\n    },\n  },\n\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}