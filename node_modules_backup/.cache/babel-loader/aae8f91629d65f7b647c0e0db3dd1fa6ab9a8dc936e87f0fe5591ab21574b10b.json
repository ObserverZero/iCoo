{"ast":null,"code":"/* eslint-disable vue/no-unused-components */\nimport { IonItem, IonCardHeader, IonCardSubtitle, IonCardContent, IonList, IonButton, IonButtons, IonCardTitle, IonAvatar, IonToggle, IonLabel, IonSegment, IonSegmentButton, IonCard, IonIcon, IonFab, IonFabButton, modalController, IonFabList, IonPage, IonHeader, IonContent, IonFooter, IonImg } from '@ionic/vue';\nimport { add, addCircle, chatbox, clipboard, calendarClear, colorFilterSharp } from 'ionicons/icons';\nimport { defineComponent, reactive, ref } from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport ChatModal from '@/menus/ChatModal.vue';\nimport ChatItem from '@/components/ChatItem.vue';\nimport ChatSpace from \"@/components/Group/ChatSpace.vue\";\nimport BoardSpace from \"@/components/Group/BoardSpace.vue\";\nimport GroupSpace from \"@/components/Group/GroupSpace.vue\";\nlet client = useMatrixClient();\nlet address = ref(\"\");\nlet children = ref({});\nlet state = ref({});\nlet chat = ref({});\nlet board = ref({});\nlet internalRooms = ref({});\nlet memberRooms = ref({});\nlet timeline = ref({});\nlet content = ref({});\nexport default defineComponent({\n  name: \"GroupPage\",\n  setup() {\n    return {\n      clipboard,\n      calendarClear,\n      addCircle,\n      chatbox,\n      add,\n      colorFilterSharp\n    };\n  },\n  data() {\n    let room = ref({\n      name: 'shit',\n      banner: 'group'\n    });\n    let topicText = ref('');\n    let topicBanner = ref('group');\n    let name = ref('');\n    let topic = ref('');\n    let content = reactive({\n      content: 'chat'\n    });\n    address = \"!\" + this.$route.params.id + \":home.parecon.work\";\n    return {\n      room,\n      content,\n      address,\n      children,\n      topicText,\n      topicBanner\n    };\n  },\n  components: {\n    ChatItem,\n    GroupSpace,\n    BoardSpace,\n    ChatSpace,\n    IonItem,\n    IonContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardContent,\n    IonList,\n    IonButton,\n    IonButtons,\n    IonCardTitle,\n    IonAvatar,\n    IonToggle,\n    IonLabel,\n    IonSegment,\n    IonSegmentButton,\n    IonCard,\n    IonIcon,\n    IonFab,\n    IonFabButton,\n    modalController,\n    IonFabList,\n    IonPage,\n    IonHeader,\n    IonFooter,\n    IonImg\n  },\n  props: {\n    name: String,\n    groupId: String,\n    topic: Object\n  },\n  methods: {\n    getImgUrl(bannerName) {\n      var images = require.context('../../public/assets/banners', false, /\\.png$/);\n      return images('./' + bannerName + \".png\");\n    },\n    yup() {\n      //client.assignParent(\"!CMJjrORidWnCIZjztk:home.parecon.work\", \"!ZEPdemtqFsoYwjhFNM:home.parecon.work\")\n      //client.assignChild(\"!ZEPdemtqFsoYwjhFNM:home.parecon.work\", \"!CMJjrORidWnCIZjztk:home.parecon.work\")\n      let huh = client.createRealGroup(\"so\");\n    },\n    async openModal() {\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          groupId: this.groupId\n        }\n      });\n      return await modal.present();\n    },\n    segmentChanged(event) {\n      this.content.content = event.detail.value;\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":home.parecon.work\";\n      setInterval(async () => {\n        try {\n          this.room = await client.getRoomById(id);\n          this.topicText = this.room.topic.text;\n          this.topicBanner = this.room.topic.banner;\n          children = client.getGroupContent(address);\n          content = await client.getChatContent(this.groupId);\n        } catch (_unused) {\n          return;\n        }\n      }, 1000);\n    },\n    async getMessages() {\n      const id = \"!\" + this.$route.params.groupId + \":home.parecon.work\";\n      let room = await client.getRoomById(id);\n      content = await client.getChatContent(id);\n\n      //console.log(room)\n    }\n  },\n\n  created() {\n    this.$watch(() => this.$route.params, () => {\n      this.fetchData();\n      this.getMessages();\n      address = \"!\" + this.$route.params.id + \":home.parecon.work\";\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n});","map":{"version":3,"mappings":"AAgDA;AACA,SACEA,OAAO,EACPC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,OAAO,EACPC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,gBAAgB,EAChBC,OAAO,EACPC,OAAO,EACPC,MAAM,EACNC,YAAY,EACZC,eAAe,EACfC,UAAU,EACVC,OAAO,EACPC,SAAS,EACTC,UAAU,EACVC,SAAS,EACTC,MAAM,QACD,YAAY;AACnB,SACEC,GAAG,EACHC,SAAS,EACTC,OAAO,EACPC,SAAS,EACTC,aAAa,EACbC,gBAAgB,QACX,gBAAgB;AACvB,SAAQC,eAAe,EAAEC,QAAQ,EAAEC,GAAG,QAAO,KAAK;AAClD,SAAQC,eAAe,QAAO,uBAAuB;AACrD,OAAOC,SAAQ,MAAO,uBAAuB;AAC7C,OAAOC,QAAO,MAAO,2BAA2B;AAChD,OAAOC,SAAQ,MAAO,kCAAkC;AACxD,OAAOC,UAAS,MAAO,mCAAmC;AAC1D,OAAOC,UAAS,MAAO,mCAAmC;AAE1D,IAAIC,MAAK,GAAIN,eAAe,EAAE;AAE9B,IAAIO,OAAM,GAAIR,GAAG,CAAC,EAAE;AACpB,IAAIS,QAAO,GAAIT,GAAG,CAAC,CAAC,CAAC;AACrB,IAAIU,KAAI,GAAIV,GAAG,CAAC,CAAC,CAAC;AAClB,IAAIW,IAAG,GAAIX,GAAG,CAAC,CAAC,CAAC;AACjB,IAAIY,KAAI,GAAIZ,GAAG,CAAC,CAAC,CAAC;AAClB,IAAIa,aAAY,GAAIb,GAAG,CAAC,CAAC,CAAC;AAC1B,IAAIc,WAAU,GAAId,GAAG,CAAC,CAAC,CAAC;AACxB,IAAIe,QAAO,GAAIf,GAAG,CAAC,CAAC,CAAC;AACrB,IAAIgB,OAAM,GAAIhB,GAAG,CAAC,CAAC,CAAC;AAIpB,eAAeF,eAAe,CAAC;EAC7BmB,IAAI,EAAE,WAAW;EACjBC,KAAK,GAAG;IACN,OAAO;MACLvB,SAAS;MACTC,aAAa;MACbH,SAAS;MACTC,OAAO;MACPF,GAAG;MACHK;IACF;EACF,CAAC;EACDsB,IAAI,GAAG;IACL,IAAIC,IAAG,GAAIpB,GAAG,CAAC;MACbiB,IAAI,EAAE,MAAM;MACZI,MAAM,EAAE;IACV,CAAC;IACD,IAAIC,SAAQ,GAAItB,GAAG,CAAC,EAAE;IACtB,IAAIuB,WAAU,GAAIvB,GAAG,CAAC,OAAO;IAC7B,IAAIiB,IAAG,GAAIjB,GAAG,CAAC,EAAE;IACjB,IAAIwB,KAAI,GAAIxB,GAAG,CAAC,EAAE;IAClB,IAAIgB,OAAM,GAAIjB,QAAQ,CAAC;MACrBiB,OAAO,EAAE;IACX,CAAC;IACDR,OAAM,GAAI,GAAE,GAAI,IAAI,CAACiB,MAAM,CAACC,MAAM,CAACC,EAAC,GAAI,oBAAmB;IAC3D,OAAO;MACLP,IAAI;MACJJ,OAAO;MACPR,OAAO;MACPC,QAAQ;MACRa,SAAS;MACTC;IACF;EACF,CAAC;EACDK,UAAU,EAAE;IACVzB,QAAQ;IACRG,UAAU;IACVD,UAAU;IACVD,SAAS;IACTpC,OAAO;IACPqB,UAAU;IACVpB,aAAa;IACbC,eAAe;IACfC,cAAc;IACdC,OAAO;IACPC,SAAS;IACTC,UAAU;IACVC,YAAY;IACZC,SAAS;IACTC,SAAS;IACTC,QAAQ;IACRC,UAAU;IACVC,gBAAgB;IAChBC,OAAO;IACPC,OAAO;IACPC,MAAM;IACNC,YAAY;IACZC,eAAe;IACfC,UAAU;IACVC,OAAO;IACPC,SAAS;IACTE,SAAS;IACTC;EACF,CAAC;EACDsC,KAAK,EAAE;IACLZ,IAAI,EAAEa,MAAM;IACZC,OAAO,EAAED,MAAM;IACfN,KAAK,EAAEQ;EACT,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,CAACC,UAAU,EAAE;MACpB,IAAIC,MAAK,GAAIC,OAAO,CAACC,OAAO,CAAC,6BAA6B,EAAE,KAAK,EAAE,QAAQ;MAC3E,OAAOF,MAAM,CAAC,IAAG,GAAID,UAAS,GAAI,MAAM;IAC1C,CAAC;IACDI,GAAG,GAAG;MACJ;MACA;MACA,IAAIC,GAAE,GAAIjC,MAAM,CAACkC,eAAe,CAAC,IAAI;IACvC,CAAC;IACD,MAAMC,SAAS,GAAG;MAChB,MAAMC,KAAI,GAAI,MAAM1D,eAAe,CAAC2D,MAAM,CAAC;QACzCC,SAAS,EAAE3C,SAAS;QACpB4C,cAAc,EAAE;UACdf,OAAO,EAAE,IAAI,CAACA;QAChB;MACF,CAAC,CAAC;MACF,OAAO,MAAMY,KAAK,CAACI,OAAO,EAAE;IAC9B,CAAC;IACDC,cAAc,CAACC,KAAK,EAAE;MACpB,IAAI,CAACjC,OAAO,CAACA,OAAM,GAAIiC,KAAK,CAACC,MAAM,CAACC,KAAK;IAC3C,CAAC;IACD,MAAMC,SAAS,GAAG;MAChB,MAAMzB,EAAC,GAAI,GAAE,GAAI,IAAI,CAACF,MAAM,CAACC,MAAM,CAACC,EAAC,GAAI,oBAAoB;MAC7D0B,WAAW,CAAC,YAAY;QACtB,IAAI;UACJ,IAAI,CAACjC,IAAG,GAAI,MAAMb,MAAM,CAAC+C,WAAW,CAAC3B,EAAE;UACvC,IAAI,CAACL,SAAQ,GAAI,IAAI,CAACF,IAAI,CAACI,KAAK,CAAC+B,IAAG;UACpC,IAAI,CAAChC,WAAU,GAAI,IAAI,CAACH,IAAI,CAACI,KAAK,CAACH,MAAK;UACxCZ,QAAO,GAAIF,MAAM,CAACiD,eAAe,CAAChD,OAAO;UACzCQ,OAAM,GAAI,MAAMT,MAAM,CAACkD,cAAc,CAAC,IAAI,CAAC1B,OAAO;QAClD,EAAE,gBAAM;UACN;QACF;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACD,MAAM2B,WAAW,GAAG;MAClB,MAAM/B,EAAC,GAAI,GAAE,GAAI,IAAI,CAACF,MAAM,CAACC,MAAM,CAACK,OAAM,GAAI,oBAAoB;MAClE,IAAIX,IAAG,GAAI,MAAMb,MAAM,CAAC+C,WAAW,CAAC3B,EAAE;MACtCX,OAAM,GAAI,MAAMT,MAAM,CAACkD,cAAc,CAAC9B,EAAE;;MAExC;IACF;EACF,CAAC;;EACDgC,OAAO,GAAG;IACR,IAAI,CAACC,MAAM,CACP,MAAM,IAAI,CAACnC,MAAM,CAACC,MAAM,EACxB,MAAM;MACJ,IAAI,CAAC0B,SAAS,EAAC;MACf,IAAI,CAACM,WAAW,EAAC;MACjBlD,OAAM,GAAI,GAAE,GAAI,IAAI,CAACiB,MAAM,CAACC,MAAM,CAACC,EAAC,GAAI,oBAAmB;IAC7D,CAAC;IACD;IACA;IACA;MAACkC,SAAS,EAAE;IAAI,EACpB;EACF;AACF,CAAC","names":["IonItem","IonCardHeader","IonCardSubtitle","IonCardContent","IonList","IonButton","IonButtons","IonCardTitle","IonAvatar","IonToggle","IonLabel","IonSegment","IonSegmentButton","IonCard","IonIcon","IonFab","IonFabButton","modalController","IonFabList","IonPage","IonHeader","IonContent","IonFooter","IonImg","add","addCircle","chatbox","clipboard","calendarClear","colorFilterSharp","defineComponent","reactive","ref","useMatrixClient","ChatModal","ChatItem","ChatSpace","BoardSpace","GroupSpace","client","address","children","state","chat","board","internalRooms","memberRooms","timeline","content","name","setup","data","room","banner","topicText","topicBanner","topic","$route","params","id","components","props","String","groupId","Object","methods","getImgUrl","bannerName","images","require","context","yup","huh","createRealGroup","openModal","modal","create","component","componentProps","present","segmentChanged","event","detail","value","fetchData","setInterval","getRoomById","text","getGroupContent","getChatContent","getMessages","created","$watch","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/views/Group.vue"],"sourcesContent":["<template id=\"yeah\">\n  <IonPage ref=\"page\">\n    <IonHeader>\n      <p style=\"padding-top: 1.2em;\"/>\n    </IonHeader>\n    <IonContent>\n\n      <IonCard>\n        <img :alt=\"topicBanner\" :src=\"getImgUrl(topicBanner)\" />\n        <IonCardHeader>\n          <div v-if=\"room != undefined\">\n            <IonCardTitle>{{ room.name }}</IonCardTitle>\n          </div>\n          <IonCardSubtitle>&{{ $route.params.id }}</IonCardSubtitle>\n          <IonLabel>{{ topicText }}</IonLabel>\n        </IonCardHeader>\n        <IonSegment\n            value=\"groups\"\n            @ionChange=\"segmentChanged($event)\"\n            v-model=\"content.content\">\n          <IonSegmentButton value=\"groups\">\n            <IonIcon :icon=\"calendarClear\" color=\"tertiary\"/>\n          </IonSegmentButton>\n          <IonSegmentButton value=\"chat\">\n            <IonIcon :icon=\"chatbox\" color=\"tertiary\"/>\n          </IonSegmentButton>\n          <IonSegmentButton value=\"board\">\n            <IonIcon :icon=\"clipboard\" color=\"tertiary\"/>\n          </IonSegmentButton>\n        </IonSegment>\n      </IonCard>\n\n      <div v-if=\"content.content === 'chat'\">\n      </div>\n      <div v-else-if=\"content.content === 'board'\">\n        <BoardSpace/>\n      </div>\n      <div v-else-if=\"content.content === 'groups'\">\n        <GroupSpace/>\n      </div>\n        <ChatSpace :groupId=\"address\"/>\n\n\n    </IonContent>\n  </IonPage>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonItem,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardContent,\n  IonList,\n  IonButton,\n  IonButtons,\n  IonCardTitle,\n  IonAvatar,\n  IonToggle,\n  IonLabel,\n  IonSegment,\n  IonSegmentButton,\n  IonCard,\n  IonIcon,\n  IonFab,\n  IonFabButton,\n  modalController,\n  IonFabList,\n  IonPage,\n  IonHeader,\n  IonContent,\n  IonFooter,\n  IonImg,\n} from '@ionic/vue';\nimport {\n  add,\n  addCircle,\n  chatbox,\n  clipboard,\n  calendarClear,\n  colorFilterSharp,\n} from 'ionicons/icons';\nimport {defineComponent, reactive, ref} from 'vue';\nimport {useMatrixClient} from \"@/stores/MatrixClient\";\nimport ChatModal from '@/menus/ChatModal.vue';\nimport ChatItem from '@/components/ChatItem.vue';\nimport ChatSpace from \"@/components/Group/ChatSpace.vue\";\nimport BoardSpace from \"@/components/Group/BoardSpace.vue\";\nimport GroupSpace from \"@/components/Group/GroupSpace.vue\";\n\nlet client = useMatrixClient();\n\nlet address = ref(\"\")\nlet children = ref({})\nlet state = ref({})\nlet chat = ref({})\nlet board = ref({})\nlet internalRooms = ref({})\nlet memberRooms = ref({})\nlet timeline = ref({})\nlet content = ref({})\n\n\n\nexport default defineComponent({\n  name: \"GroupPage\",\n  setup() {\n    return {\n      clipboard,\n      calendarClear,\n      addCircle,\n      chatbox,\n      add,\n      colorFilterSharp,\n    }\n  },\n  data() {\n    let room = ref({\n      name: 'shit',\n      banner: 'group'\n    })\n    let topicText = ref('')\n    let topicBanner = ref('group')\n    let name = ref('')\n    let topic = ref('')\n    let content = reactive({\n      content: 'chat'\n    })\n    address = \"!\" + this.$route.params.id + \":home.parecon.work\"\n    return {\n      room,\n      content,\n      address,\n      children,\n      topicText,\n      topicBanner,\n    }\n  },\n  components: {\n    ChatItem,\n    GroupSpace,\n    BoardSpace,\n    ChatSpace,\n    IonItem,\n    IonContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardContent,\n    IonList,\n    IonButton,\n    IonButtons,\n    IonCardTitle,\n    IonAvatar,\n    IonToggle,\n    IonLabel,\n    IonSegment,\n    IonSegmentButton,\n    IonCard,\n    IonIcon,\n    IonFab,\n    IonFabButton,\n    modalController,\n    IonFabList,\n    IonPage,\n    IonHeader,\n    IonFooter,\n    IonImg,\n  },\n  props: {\n    name: String,\n    groupId: String,\n    topic: Object,\n  },\n  methods: {\n    getImgUrl(bannerName) {\n      var images = require.context('../../public/assets/banners', false, /\\.png$/)\n      return images('./' + bannerName + \".png\")\n    },\n    yup() {\n      //client.assignParent(\"!CMJjrORidWnCIZjztk:home.parecon.work\", \"!ZEPdemtqFsoYwjhFNM:home.parecon.work\")\n      //client.assignChild(\"!ZEPdemtqFsoYwjhFNM:home.parecon.work\", \"!CMJjrORidWnCIZjztk:home.parecon.work\")\n      let huh = client.createRealGroup(\"so\")\n    },\n    async openModal() {\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          groupId: this.groupId,\n        }\n      });\n      return await modal.present();\n    },\n    segmentChanged(event) {\n      this.content.content = event.detail.value;\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":home.parecon.work\";\n      setInterval(async () => {\n        try {\n        this.room = await client.getRoomById(id)\n        this.topicText = this.room.topic.text\n        this.topicBanner = this.room.topic.banner\n        children = client.getGroupContent(address)\n        content = await client.getChatContent(this.groupId)\n        } catch {\n          return\n        }\n      }, 1000);\n    },\n    async getMessages() {\n      const id = \"!\" + this.$route.params.groupId + \":home.parecon.work\";\n      let room = await client.getRoomById(id)\n      content = await client.getChatContent(id)\n\n      //console.log(room)\n    },\n  },\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n          this.getMessages()\n          address = \"!\" + this.$route.params.id + \":home.parecon.work\"\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n})\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}