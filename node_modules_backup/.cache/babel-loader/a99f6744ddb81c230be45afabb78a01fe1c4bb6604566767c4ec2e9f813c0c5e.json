{"ast":null,"code":"/* eslint-disable vue/no-unused-components */\nimport { IonContent, IonHeader, IonTitle, IonToolbar, IonFooter, IonButtons, IonButton, IonItem, IonLabel, IonInput, modalController, IonCheckbox, IonIcon, IonBadge, IonSearchbar, IonModal, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent, IonTextArea, IonChip } from '@ionic/vue';\nimport { send } from 'ionicons/icons';\nimport { notifications } from \"ionicons/icons\";\nimport { defineComponent, ref } from 'vue';\nimport { useMatrixClient } from '@/stores/MatrixClient.js';\nimport ChatBubble from '@/components/ChatBubble.vue';\nconst client = useMatrixClient();\nlet groupId = ref('');\nlet content = ref({});\nexport default defineComponent({\n  name: 'ChatModal',\n  components: {\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonFooter,\n    modalController,\n    IonCheckbox,\n    IonIcon,\n    IonBadge,\n    IonSearchbar,\n    IonModal,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonTextArea,\n    IonChip,\n    ChatBubble\n  },\n  setup() {\n    return {\n      notifications\n    };\n  },\n  data() {\n    let updated = client.updateChat(this.$props.message.id);\n    let alternateTimeline = ref({});\n    return {\n      text: '',\n      content: this.$props.message,\n      updated,\n      send\n    };\n  },\n  props: {\n    message: Object\n  },\n  methods: {\n    close() {\n      return modalController.dismiss(null, 'cancel');\n    },\n    enterPressToSend(event) {\n      let input = document.getElementById(\"bottomInput\");\n      // Execute a function when the user presses a key on the keyboard\n      input.addEventListener(\"keypress\", function (event) {\n        // If the user presses the \"Enter\" key on the keyboard\n        if (event.key === \"Enter\") {\n          // Cancel the default action, if needed\n          event.preventDefault();\n          // Trigger the button element with a click\n          document.getElementById('bottomInput').value = '';\n        }\n      });\n    },\n    async sendText() {\n      let returned = await client.sendText(this.content.id, this.text);\n      document.getElementById('bottomInput').value = '';\n    },\n    async fetchData() {\n      this.alternateTimeline = await client.getTimeline(this.$props.message.id);\n      console.log(this.alternateTimeline);\n      setInterval(async () => {\n        this.updated = await client.updateChat(this.$props.message.id);\n        console.log(this.updated);\n      }, 1000);\n      return;\n    },\n    sendAndFetch() {\n      this.sendText();\n      this.fetchData();\n    }\n  },\n  created() {\n    this.$watch(() => this.$route.params, () => {\n      this.fetchData();\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n});","map":{"version":3,"mappings":"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","names":["IonContent","IonHeader","IonTitle","IonToolbar","IonFooter","IonButtons","IonButton","IonItem","IonLabel","IonInput","modalController","IonCheckbox","IonIcon","IonBadge","IonSearchbar","IonModal","IonCard","IonCardHeader","IonCardSubtitle","IonCardTitle","IonCardContent","IonTextArea","IonChip","send","notifications","defineComponent","ref","useMatrixClient","ChatBubble","client","groupId","content","name","components","setup","data","updated","updateChat","$props","message","id","alternateTimeline","text","props","Object","methods","close","dismiss","enterPressToSend","event","input","document","getElementById","addEventListener","key","preventDefault","value","sendText","returned","fetchData","getTimeline","console","log","setInterval","sendAndFetch","created","$watch","$route","params","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/menus/ChatModal.vue"],"sourcesContent":["<template>\n  <IonHeader>\n    <IonToolbar>\n      <IonButtons slot=\"start\">\n        <IonButton @click=\"close\">close</IonButton>\n      </IonButtons>\n      <IonSearchbar></IonSearchbar>\n      <IonButtons slot=\"end\">\n        <IonButton>\n          <IonIcon :icon=\"notifications\" color=\"tertiary\"/>\n          <IonBadge slot=\"end\" color=\"danger\">2</IonBadge>\n        </IonButton>\n      </IonButtons>\n    </IonToolbar>\n  </IonHeader>\n  <IonFooter>\n    <IonToolbar>\n      <IonInput \n        v-model=\"text\" \n        placeholder=\"wtf?\"\n        :clear-on-edit=\"true\"\n        id=\"bottomInput\"></IonInput>\n      <IonButtons slot=\"end\">\n        <IonButton id=\"send\" @click=\"sendAndFetch\">\n          <IonIcon :icon=\"send\" color=\"primary\"/>\n        </IonButton>\n      </IonButtons>\n    </IonToolbar>\n  </IonFooter>\n  <IonContent>\n    <div v-if=\"updated != undefined\">\n      <IonCard>\n        <IonCardHeader>\n          {{ updated.topic.text }}\n        </IonCardHeader>\n      </IonCard>\n    <div v-for=\"entry in updated.content\" v-bind:key=\"entry\" :value=\"content\">\n      <div v-if=\"entry.type === 'm.room.message'\">\n        <ChatBubble :text=\"entry.content.body\" :sender=\"entry.sender\" :content=\"entry\" :id=\"entry.id\" indent=\"0\"/>\n    </div>\n    </div>\n</div>\n  </IonContent>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonContent,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonFooter,\n  IonButtons,\n  IonButton,\n  IonItem,\n  IonLabel,\n  IonInput,\n  modalController,\n  IonCheckbox,\n  IonIcon,\n  IonBadge,\n  IonSearchbar,\n  IonModal,\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonCardContent,\n  IonTextArea,\n  IonChip,\n} from '@ionic/vue';\nimport {\n  send,\n} from 'ionicons/icons';\nimport {notifications} from \"ionicons/icons\";\nimport {defineComponent, ref} from 'vue';\nimport {useMatrixClient} from '@/stores/MatrixClient.js';\nimport ChatBubble from '@/components/ChatBubble.vue';\n\nconst client = useMatrixClient()\n\nlet groupId = ref('')\nlet content = ref({})\n\n\nexport default defineComponent({\n  name: 'ChatModal',\n  components: {\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonFooter,\n    modalController,\n    IonCheckbox,\n    IonIcon,\n    IonBadge,\n    IonSearchbar,\n    IonModal,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonTextArea,\n    IonChip,\n    ChatBubble,\n  },\n  setup() {\n    return {\n      notifications,\n    }\n  },\n  data() {\n    let updated = client.updateChat(this.$props.message.id)\n    let alternateTimeline = ref({})\n    return {\n      text: '',\n      content: this.$props.message,\n      updated,\n      send,\n    };\n  },\n  props: {\n    message: Object,\n  },\n  methods: {\n    close() {\n      return modalController.dismiss(null, 'cancel');\n    },\n    enterPressToSend(event) {\n      let input = document.getElementById(\"bottomInput\");\n      // Execute a function when the user presses a key on the keyboard\n      input.addEventListener(\"keypress\", function(event) {\n        // If the user presses the \"Enter\" key on the keyboard\n        if (event.key === \"Enter\") {\n          // Cancel the default action, if needed\n          event.preventDefault();\n          // Trigger the button element with a click\n          document.getElementById('bottomInput').value = ''\n        }\n      });\n    },\n    async sendText() {\n      let returned = await client.sendText(this.content.id, this.text)\n      document.getElementById('bottomInput').value = ''\n    },\n    async fetchData() {\n      this.alternateTimeline = await client.getTimeline(this.$props.message.id)\n      console.log(this.alternateTimeline)\n      setInterval(async () => {\n        this.updated = await client.updateChat(this.$props.message.id)\n        console.log(this.updated)\n      }, 1000)\n      return\n    },\n    sendAndFetch() {\n      this.sendText()\n      this.fetchData()\n    },\n  },\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}