{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/* eslint-disable vue/no-unused-components */\nimport { IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonIcon, IonCardContent, IonList, IonItem, modalController, IonModal, IonHeader, IonToolbar, IonButtons, IonButton, IonSearchbar, IonTitle, IonContent, IonInput, IonLabel, IonFab, IonFabButton, IonFabList } from '@ionic/vue';\nimport { arrowBack, chevronUpCircle, add, menu, close, search, personCircle, addCircle, bulb, caretUp, peopleCircle, chatbox, colorFilter, colorFilterSharp, clipboard } from 'ionicons/icons';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport { defineComponent, reactive, ref } from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport { useCrossPage } from \"@/stores/CrossPageUpdates\";\nimport CreateChatModal from \"@/menus/CreateChatModal.vue\";\nimport ChatBubble from \"@/components/ChatBubble.vue\";\nlet client = useMatrixClient();\nlet chats = ref({});\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    let noContent = ref(true);\n    let content = ref({});\n    return {\n      chats,\n      addCircle,\n      add,\n      chatbox,\n      noContent,\n      content\n    };\n  },\n  setup() {\n    return {};\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n    IonFab,\n    IonFabButton,\n    IonFabList,\n    ChatBubble\n  },\n  props: {\n    messages: Object\n  },\n  methods: {\n    async fetchData() {\n      this.content.value.creator = content.value.creator.replace(/:.*/, '');\n    },\n    async openModal() {\n      const modal = await modalController.create({\n        component: CreateChatModal,\n        componentProps: {\n          chatSpaceId: this.$props.messages.id\n        }\n      });\n      await modal.present();\n      const {\n        data,\n        role\n      } = await modal.onWillDismiss();\n    }\n  },\n  created() {\n    this.$watch(() => this.$route.params, () => {\n      this.fetchData();\n      setInterval(async () => {\n        console.log(this.$props.messages);\n      }, 2000);\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n};","map":{"version":3,"mappings":";;AAiBA;AACA,SACEA,OAAO,EACPC,aAAa,EACbC,eAAe,EACfC,YAAY,EACZC,OAAO,EACPC,cAAc,EACdC,OAAO,EACPC,OAAO,EACPC,eAAe,EACfC,QAAQ,EACRC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,SAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,UAAU,EACVC,QAAQ,EACRC,QAAQ,EACRC,MAAM,EACNC,YAAY,EACZC,UAAU,QACL,YAAY;AACnB,SACEC,SAAS,EACTC,eAAe,EACfC,GAAG,EACHC,IAAI,EACJC,KAAK,EACLC,MAAM,EACNC,YAAY,EACZC,SAAS,EACTC,IAAI,EACJC,OAAO,EACPC,YAAY,EACZC,OAAO,EACPC,WAAW,EACXC,gBAAgB,EAChBC,SAAS,QACJ,gBAAgB;AACvB,OAAOC,QAAO,MAAO,2BAA2B;AAChD,SAAQC,eAAe,EAAEC,QAAQ,EAAEC,GAAG,QAAO,KAAK;AAClD,SAASC,eAAc,QAAS,uBAAuB;AACvD,SAASC,YAAW,QAAS,2BAA2B;AACxD,OAAOC,eAAc,MAAO,6BAA6B;AACzD,OAAOC,UAAS,MAAO,6BAA6B;AAEpD,IAAIC,MAAK,GAAIJ,eAAe,EAAE;AAE9B,IAAIK,KAAI,GAAIN,GAAG,CAAC,CAAC,CAAC;AAElB,eAAe;EACbO,IAAI,EAAE,WAAW;EACjBC,IAAI,GAAG;IACL,IAAIC,SAAQ,GAAIT,GAAG,CAAC,IAAI;IACxB,IAAIU,OAAM,GAAIV,GAAG,CAAC,CAAC,CAAC;IACpB,OAAO;MACLM,KAAK;MACLjB,SAAS;MACTL,GAAG;MACHS,OAAO;MACPgB,SAAS;MACTC;IACF;EACF,CAAC;EACDC,KAAK,GAAG;IACN,OAAO,CAAC;EACV,CAAC;EACDC,UAAU,EAAE;IACVf,QAAQ;IACRrC,OAAO;IACPC,aAAa;IACbC,eAAe;IACfC,YAAY;IACZC,OAAO;IACPC,cAAc;IACdC,OAAO;IACPC,OAAO;IACPC,eAAe;IACfC,QAAQ;IACRC,SAAS;IACTC,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,YAAY;IACZC,QAAQ;IACRC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,YAAY;IACZC,UAAU;IACVuB;EACF,CAAC;EACDS,KAAK,EAAE;IACLC,QAAQ,EAAEC;EACZ,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAAS,GAAG;MAChB,IAAI,CAACP,OAAO,CAACQ,KAAK,CAACC,OAAM,GAAIT,OAAO,CAACQ,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE;IACtE,CAAC;IACD,MAAMC,SAAS,GAAG;MAChB,MAAMC,KAAI,GAAI,MAAMtD,eAAe,CAACuD,MAAM,CAAC;QACzCC,SAAS,EAAErB,eAAe;QAC1BsB,cAAc,EAAE;UACdC,WAAW,EAAE,IAAI,CAACC,MAAM,CAACb,QAAQ,CAACc;QACpC;MACF,CAAC,CAAC;MACF,MAAMN,KAAK,CAACO,OAAO,EAAE;MACrB,MAAM;QAACrB,IAAI;QAAEsB;MAAI,IAAI,MAAMR,KAAK,CAACS,aAAa,EAAE;IAClD;EAEF,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACC,MAAM,CACT,MAAM,IAAI,CAACC,MAAM,CAACC,MAAM,EACxB,MAAM;MACJ,IAAI,CAAClB,SAAS,EAAC;MACfmB,WAAW,CAAC,YAAY;QACtBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,MAAM,CAACb,QAAQ;MAClC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACD;IACA;IACA;MAAEyB,SAAS,EAAE;IAAK,EACpB;EACF;AACF","names":["IonCard","IonCardHeader","IonCardSubtitle","IonCardTitle","IonIcon","IonCardContent","IonList","IonItem","modalController","IonModal","IonHeader","IonToolbar","IonButtons","IonButton","IonSearchbar","IonTitle","IonContent","IonInput","IonLabel","IonFab","IonFabButton","IonFabList","arrowBack","chevronUpCircle","add","menu","close","search","personCircle","addCircle","bulb","caretUp","peopleCircle","chatbox","colorFilter","colorFilterSharp","clipboard","ChatItem","defineComponent","reactive","ref","useMatrixClient","useCrossPage","CreateChatModal","ChatBubble","client","chats","name","data","noContent","content","setup","components","props","messages","Object","methods","fetchData","value","creator","replace","openModal","modal","create","component","componentProps","chatSpaceId","$props","id","present","role","onWillDismiss","created","$watch","$route","params","setInterval","console","log","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n\n<div v-if=\"messages != undefined\">\n  <div v-for=\"value in messages.children\" v-bind:key=\"value\">\n    <ChatItem :message=\"value\"/>\n  </div>\n</div>\n\n<IonFab slot=\"fixed\" vertical=\"bottom\" horizontal=\"end\">\n  <IonFabButton color=\"dark\" @click=\"openModal\">\n    <IonIcon :icon=\"chatbox\"></IonIcon>\n  </IonFabButton>\n</IonFab>\n\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n  IonFab,\n  IonFabButton,\n  IonFabList,\n} from '@ionic/vue';\nimport {\n  arrowBack,\n  chevronUpCircle,\n  add,\n  menu,\n  close,\n  search,\n  personCircle,\n  addCircle,\n  bulb,\n  caretUp,\n  peopleCircle,\n  chatbox,\n  colorFilter,\n  colorFilterSharp,\n  clipboard,\n} from 'ionicons/icons';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport { useCrossPage } from \"@/stores/CrossPageUpdates\";\nimport CreateChatModal from \"@/menus/CreateChatModal.vue\";\nimport ChatBubble from \"@/components/ChatBubble.vue\";\n\nlet client = useMatrixClient();\n\nlet chats = ref({})\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    let noContent = ref(true)\n    let content = ref({})\n    return {\n      chats,\n      addCircle,\n      add,\n      chatbox,\n      noContent,\n      content,\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n    IonFab,\n    IonFabButton,\n    IonFabList,\n    ChatBubble,\n  },\n  props: {\n    messages: Object,\n  },\n  methods: {\n    async fetchData() {\n      this.content.value.creator = content.value.creator.replace(/:.*/, '')\n    },\n    async openModal() {\n      const modal = await modalController.create({\n        component: CreateChatModal,\n        componentProps: {\n          chatSpaceId: this.$props.messages.id,\n        }\n      });\n      await modal.present();\n      const {data, role} = await modal.onWillDismiss();\n    },\n\n  },\n  created() {\n    this.$watch(\n      () => this.$route.params,\n      () => {\n        this.fetchData()\n        setInterval(async () => {\n          console.log(this.$props.messages)\n        }, 2000);\n      },\n      // fetch the data when the view is created and the data is\n      // already being observed\n      { immediate: true }\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}