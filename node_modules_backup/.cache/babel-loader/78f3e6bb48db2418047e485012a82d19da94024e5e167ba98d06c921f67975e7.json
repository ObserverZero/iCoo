{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_IonItem = _resolveComponent(\"IonItem\");\n  const _component_IonList = _resolveComponent(\"IonList\");\n  const _component_IonButton = _resolveComponent(\"IonButton\");\n  const _component_IonButtons = _resolveComponent(\"IonButtons\");\n  const _component_IonTitle = _resolveComponent(\"IonTitle\");\n  const _component_IonToolbar = _resolveComponent(\"IonToolbar\");\n  const _component_IonHeader = _resolveComponent(\"IonHeader\");\n  const _component_IonLabel = _resolveComponent(\"IonLabel\");\n  const _component_IonInput = _resolveComponent(\"IonInput\");\n  const _component_IonModal = _resolveComponent(\"IonModal\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"  <IonList>\"), _createCommentVNode(\"    <IonList v-for=\\\"message in messages\\\" v-bind:key=\\\"message\\\">\"), _createCommentVNode(\"      <IonItem id=\\\"open-modal\\\" expand=\\\"block\\\">\"), _createCommentVNode(\"        wow\"), _createCommentVNode(\"      </IonItem>\"), _createCommentVNode(\"    </IonList>\"), _createCommentVNode(\"  </IonList>\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.content.chat, item => {\n    return _openBlock(), _createBlock(_component_IonList, {\n      key: item\n    }, {\n      default: _withCtx(() => [_createVNode(_component_IonItem, null, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(item), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_IonModal, {\n    ref: \"modal\",\n    trigger: \"open-modal\",\n    onWillDismiss: $options.onWillDismiss\n  }, {\n    default: _withCtx(() => [_createVNode(_component_IonHeader, null, {\n      default: _withCtx(() => [_createVNode(_component_IonToolbar, null, {\n        default: _withCtx(() => [_createVNode(_component_IonButtons, {\n          slot: \"start\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_IonButton, {\n            onClick: _cache[0] || (_cache[0] = $event => $options.cancel())\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Cancel\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_IonTitle, null, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.messages), 1 /* TEXT */)]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_IonButtons, {\n          slot: \"end\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_IonButton, {\n            strong: true,\n            onClick: _cache[1] || (_cache[1] = $event => $options.confirm())\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Confirm\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), _createVNode(_component_IonItem, null, {\n      default: _withCtx(() => [_createVNode(_component_IonLabel, {\n        position: \"stacked\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"Enter your name\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_IonInput, {\n        ref: \"input\",\n        type: \"text\",\n        placeholder: \"Your name\"\n      }, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onWillDismiss\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;6DACEA,kCAAkB,EAClBA,yFAAqE,EACrEA,yEAAqD,EACrDA,kCAAkB,EAClBA,uCAAuB,EACvBA,qCAAqB,EACrBA,mCAAmB,qBACnBC,oBAEUC,6BAFcC,aAAO,CAACC,IAAI,EAApBC,IAAI;yBAApBC,aAEUC;MAFmCC,GAAG,EAAEH;IAAI;wBACpD,MAA6B,CAA7BI,aAA6BC;0BAApB,MAAU,mCAAPL,IAAI;;;;;;;kCAGlBI,aAgBWE;IAhBDC,GAAG,EAAC,OAAO;IAACC,OAAO,EAAC,YAAY;IAAEC,aAAW,EAAEC;;sBACvD,MAUY,CAVZN,aAUYO;wBATV,MAQa,CARbP,aAQaQ;0BAPX,MAEa,CAFbR,aAEaS;UAFDC,IAAI,EAAC;QAAO;4BACtB,MAA+C,CAA/CV,aAA+CW;YAAnCC,OAAK,sCAAEN,eAAM;;8BAAI,MAAM,kBAAN,QAAM;;;;;YAErCN,aAAmCa;4BAAzB,MAAc,mCAAXC,aAAQ;;;YACrBd,aAEaS;UAFDC,IAAI,EAAC;QAAK;4BACpB,MAAgE,CAAhEV,aAAgEW;YAApDI,MAAM,EAAE,IAAI;YAAGH,OAAK,sCAAEN,gBAAO;;8BAAI,MAAO,kBAAP,SAAO;;;;;;;;;;;QAI1DN,aAGUC;wBAFR,MAAuD,CAAvDD,aAAuDgB;QAA7CC,QAAQ,EAAC;MAAS;0BAAC,MAAe,kBAAf,iBAAe;;UAC5CjB,aAAqEkB;QAA3Df,GAAG,EAAC,OAAO;QAACgB,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC","names":["_createCommentVNode","_createElementBlock","_Fragment","$data","chat","item","_createBlock","_component_IonList","key","_createVNode","_component_IonItem","_component_IonModal","ref","trigger","onWillDismiss","$options","_component_IonHeader","_component_IonToolbar","_component_IonButtons","slot","_component_IonButton","onClick","_component_IonTitle","_ctx","strong","_component_IonLabel","position","_component_IonInput","type","placeholder"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n  <!--  <IonList>-->\n  <!--    <IonList v-for=\"message in messages\" v-bind:key=\"message\">-->\n  <!--      <IonItem id=\"open-modal\" expand=\"block\">-->\n  <!--        wow-->\n  <!--      </IonItem>-->\n  <!--    </IonList>-->\n  <!--  </IonList>-->\n  <IonList v-for=\"item in content.chat\" v-bind:key=\"item\">\n    <IonItem>{{ item }}</IonItem>\n  </IonList>\n\n  <IonModal ref=\"modal\" trigger=\"open-modal\" @willDismiss=\"onWillDismiss\">\n    <IonHeader>\n      <IonToolbar>\n        <IonButtons slot=\"start\">\n          <IonButton @click=\"cancel()\">Cancel</IonButton>\n        </IonButtons>\n        <IonTitle>{{ messages }}</IonTitle>\n        <IonButtons slot=\"end\">\n          <IonButton :strong=\"true\" @click=\"confirm()\">Confirm</IonButton>\n        </IonButtons>\n      </IonToolbar>\n    </IonHeader>\n    <IonItem>\n      <IonLabel position=\"stacked\">Enter your name</IonLabel>\n      <IonInput ref=\"input\" type=\"text\" placeholder=\"Your name\"></IonInput>\n    </IonItem>\n  </IonModal>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n} from '@ionic/vue';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\n\nlet client = useMatrixClient();\n\nlet content = ref({})\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n      content,\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n  },\n  props: {\n    groupId: String,\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getGroupContent(this.groupId)\n        } catch {\n          return\n        }\n        console.log(content.value)\n      }, 1000);\n    },\n  },\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}