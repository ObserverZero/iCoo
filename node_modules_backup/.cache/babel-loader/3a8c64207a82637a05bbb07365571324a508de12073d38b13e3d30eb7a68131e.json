{"ast":null,"code":"/* eslint-disable vue/no-unused-components */\nimport { IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonIcon, IonCardContent, IonList, IonItem, modalController, IonModal, IonHeader, IonToolbar, IonButtons, IonButton, IonSearchbar, IonTitle, IonContent, IonInput, IonLabel } from '@ionic/vue';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport { defineComponent, reactive, ref } from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport { useCrossPage } from \"@/stores/CrossPageUpdates\";\nimport Modal from \"@/menus/Modal.vue\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\nlet content = ref({});\nlet chats = ref({});\nsetInterval(async () => {\n  try {\n    content = await client.getChatContent(this.groupId);\n  } catch (_unused) {\n    return;\n  }\n  console.log(content);\n}, 2000);\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n      content,\n      chats\n    };\n  },\n  setup() {\n    return {};\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel\n  },\n  props: {\n    groupId: String\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n    async openModal(topic) {\n      let thaTopic = topic;\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          message: thaTopic\n        }\n      });\n      await modal.present();\n      const {\n        data,\n        role\n      } = await modal.onWillDismiss();\n      if (role === 'confirm') {\n        console.log(\"sure thing\");\n      }\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(this.groupId);\n        } catch (_unused2) {\n          return;\n        }\n      }, 2000);\n    }\n  },\n  created() {\n    this.$watch(() => this.$route.params, () => {\n      this.fetchData();\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n};","map":{"version":3,"mappings":"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","names":["IonCard","IonCardHeader","IonCardSubtitle","IonCardTitle","IonIcon","IonCardContent","IonList","IonItem","modalController","IonModal","IonHeader","IonToolbar","IonButtons","IonButton","IonSearchbar","IonTitle","IonContent","IonInput","IonLabel","ChatItem","defineComponent","reactive","ref","useMatrixClient","useCrossPage","Modal","ChatModal","client","crossPage","content","chats","setInterval","getChatContent","groupId","console","log","name","data","setup","components","props","String","methods","cancel","$refs","modal","$el","dismiss","confirm","input","value","onWillDismiss","ev","detail","role","message","openModal","topic","thaTopic","create","component","componentProps","present","fetchData","id","$route","params","created","$watch","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/components/Group/ChatSpace.vue"],"sourcesContent":["<template ref=\"chatSpace\">\n    <!--  <IonList>-->\n    <!--    <IonList v-for=\"message in messages\" v-bind:key=\"message\">-->\n    <!--      <IonItem id=\"open-modal\" expand=\"block\">-->\n    <!--        wow-->\n    <!--      </IonItem>-->\n    <!--    </IonList>-->\n    <!--  </IonList>-->\n    <div v-for=\"value, key in content\" v-bind:key=\"value\">\n      <IonCard @click=\"openModal\">\n        <IonCardHeader>{{ value }} {{ key }}</IonCardHeader>\n      <ion-button fill=\"clear\" @click=\"openModal({{ value }})\">open chat</ion-button>\n    <ion-button fill=\"clear\">follow</ion-button>\n      </IonCard>\n    </div>\n\n  <IonModal ref=\"modal\" trigger=\"open-modal\" @willDismiss=\"onWillDismiss\">\n    <IonHeader>\n      <IonToolbar>\n        <IonButtons slot=\"start\">\n          <IonButton @click=\"cancel()\">Cancel</IonButton>\n        </IonButtons>\n        <IonTitle>{{ messages }}</IonTitle>\n        <IonButtons slot=\"end\">\n          <IonButton :strong=\"true\" @click=\"confirm()\">Conwhat</IonButton>\n        </IonButtons>\n      </IonToolbar>\n    </IonHeader>\n    <IonItem>\n      <IonLabel position=\"stacked\">Enter your name</IonLabel>\n      <IonInput ref=\"input\" type=\"text\" placeholder=\"Your name\"></IonInput>\n    </IonItem>\n  </IonModal>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonIcon,\n  IonCardContent,\n  IonList,\n  IonItem,\n  modalController,\n  IonModal,\n  IonHeader,\n  IonToolbar,\n  IonButtons,\n  IonButton,\n  IonSearchbar,\n  IonTitle,\n  IonContent,\n  IonInput,\n  IonLabel,\n} from '@ionic/vue';\nimport ChatItem from \"@/components/ChatItem.vue\";\nimport {defineComponent, reactive, ref} from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport {useCrossPage} from \"@/stores/CrossPageUpdates\";\nimport Modal from \"@/menus/Modal.vue\";\nimport ChatModal from \"@/menus/ChatModal.vue\";\n\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\n\nlet content = ref({})\nlet chats = ref({})\n\nsetInterval(async () => {\n  try {\n    content = await client.getChatContent(this.groupId)\n  } catch {\n    return\n  }\n  console.log(content)\n}, 2000);\n\nexport default {\n  name: \"ChatSpace\",\n  data() {\n    return {\n      content,\n      chats,\n    }\n  },\n  setup() {\n    return {}\n  },\n  components: {\n    ChatItem,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonIcon,\n    IonCardContent,\n    IonList,\n    IonItem,\n    modalController,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonSearchbar,\n    IonTitle,\n    IonContent,\n    IonInput,\n    IonLabel,\n  },\n  props: {\n    groupId: String,\n  },\n  methods: {\n    cancel() {\n      this.$refs.modal.$el.dismiss(null, 'cancel');\n    },\n    confirm() {\n      const name = this.$refs.input.$el.value;\n      this.$refs.modal.$el.dismiss(name, 'confirm');\n    },\n    onWillDismiss(ev) {\n      if (ev.detail.role === 'confirm') {\n        this.message = `Hello, ${ev.detail.data}!`;\n      }\n    },\n\n    async openModal(topic) {\n      let thaTopic = topic;\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          message: thaTopic,\n        }\n      });\n      await modal.present();\n\n      const {data, role} = await modal.onWillDismiss();\n\n      if (role === 'confirm') {\n        console.log(\"sure thing\")\n      }\n    },\n\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      setInterval(async () => {\n        try {\n          content = await client.getChatContent(this.groupId)\n        } catch {\n          return\n        }\n      }, 2000);\n    },\n  },\n\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n}\n\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}