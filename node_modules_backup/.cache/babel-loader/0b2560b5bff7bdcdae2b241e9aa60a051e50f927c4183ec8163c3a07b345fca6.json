{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_IonButton = _resolveComponent(\"IonButton\");\n  const _component_IonButtons = _resolveComponent(\"IonButtons\");\n  const _component_IonSearchbar = _resolveComponent(\"IonSearchbar\");\n  const _component_IonIcon = _resolveComponent(\"IonIcon\");\n  const _component_IonBadge = _resolveComponent(\"IonBadge\");\n  const _component_IonToolbar = _resolveComponent(\"IonToolbar\");\n  const _component_IonHeader = _resolveComponent(\"IonHeader\");\n  const _component_IonInput = _resolveComponent(\"IonInput\");\n  const _component_IonFooter = _resolveComponent(\"IonFooter\");\n  const _component_IonCardHeader = _resolveComponent(\"IonCardHeader\");\n  const _component_IonCard = _resolveComponent(\"IonCard\");\n  const _component_ChatBubble = _resolveComponent(\"ChatBubble\");\n  const _component_IonContent = _resolveComponent(\"IonContent\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_IonHeader, null, {\n    default: _withCtx(() => [_createVNode(_component_IonToolbar, null, {\n      default: _withCtx(() => [_createVNode(_component_IonButtons, {\n        slot: \"start\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_IonButton, {\n          onClick: _ctx.close\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"close\")]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_IonSearchbar), _createVNode(_component_IonButtons, {\n        slot: \"end\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_IonButton, null, {\n          default: _withCtx(() => [_createVNode(_component_IonIcon, {\n            icon: _ctx.notifications,\n            color: \"tertiary\"\n          }, null, 8 /* PROPS */, [\"icon\"]), _createVNode(_component_IonBadge, {\n            slot: \"end\",\n            color: \"danger\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"2\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_IonFooter, null, {\n    default: _withCtx(() => [_createVNode(_component_IonToolbar, null, {\n      default: _withCtx(() => [_createVNode(_component_IonInput, {\n        modelValue: _ctx.text,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.text = $event),\n        placeholder: \"wtf?\",\n        \"clear-on-edit\": true,\n        id: \"bottomInput\"\n      }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_IonButtons, {\n        slot: \"end\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_IonButton, {\n          id: \"send\",\n          onClick: _ctx.sendAndFetch\n        }, {\n          default: _withCtx(() => [_createVNode(_component_IonIcon, {\n            icon: _ctx.send,\n            color: \"primary\"\n          }, null, 8 /* PROPS */, [\"icon\"])]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_IonContent, null, {\n    default: _withCtx(() => [_createVNode(_component_IonCard, null, {\n      default: _withCtx(() => [_createVNode(_component_IonCardHeader, null, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.updated.topic.text), 1 /* TEXT */)]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.alternateTimeline.messages.chunk, entry => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: entry,\n        value: _ctx.content\n      }, [entry.type === 'm.room.message' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_ChatBubble, {\n        text: entry.content.body,\n        sender: entry.sender,\n        content: entry,\n        id: entry.event_id,\n        indent: \"0\"\n      }, null, 8 /* PROPS */, [\"text\", \"sender\", \"content\", \"id\"])])) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_1);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;6DACEA,aAaYC;sBAZV,MAWa,CAXbD,aAWaE;wBAVX,MAEa,CAFbF,aAEaG;QAFDC,IAAI,EAAC;MAAO;0BACtB,MAA2C,CAA3CJ,aAA2CK;UAA/BC,OAAK,EAAEC;QAAK;4BAAE,MAAK,kBAAL,OAAK;;;;UAEjCP,aAA6BQ,0BAC7BR,aAKaG;QALDC,IAAI,EAAC;MAAK;0BACpB,MAGY,CAHZJ,aAGYK;4BAFV,MAAiD,CAAjDL,aAAiDS;YAAvCC,IAAI,EAAEH,kBAAa;YAAEI,KAAK,EAAC;6CACrCX,aAAgDY;YAAtCR,IAAI,EAAC,KAAK;YAACO,KAAK,EAAC;;8BAAS,MAAC,kBAAD,GAAC;;;;;;;;;;;;;;MAK7CX,aAaYa;sBAZV,MAWa,CAXbb,aAWaE;wBAVX,MAI8B,CAJ9BF,aAI8Bc;oBAHnBP,SAAI;mEAAJA,SAAI;QACbQ,WAAW,EAAC,MAAM;QACjB,eAAa,EAAE,IAAI;QACpBC,EAAE,EAAC;+CACLhB,aAIaG;QAJDC,IAAI,EAAC;MAAK;0BACpB,MAEY,CAFZJ,aAEYK;UAFDW,EAAE,EAAC,MAAM;UAAEV,OAAK,EAAEC;;4BAC3B,MAAuC,CAAvCP,aAAuCS;YAA7BC,IAAI,EAAEH,SAAI;YAAEI,KAAK,EAAC;;;;;;;;;;;MAKpCX,aAWaiB;sBAVT,MAIU,CAJVjB,aAIUkB;wBAHR,MAEgB,CAFhBlB,aAEgBmB;0BADd,MAAwB,mCAArBZ,YAAO,CAACa,KAAK,CAACC,IAAI;;;;;;2BAG3BC,oBAIMC,6BAJehB,sBAAiB,CAACiB,QAAQ,CAACC,KAAK,EAAzCC,KAAK;2BAAjBJ,oBAIM;QAJwDK,GAAG,EAAED,KAAK;QAAGE,KAAK,EAAErB;UACrEmB,KAAK,CAACG,IAAI,uCAArBP,oBAEI,oBADFtB,aAAgH8B;QAAnGT,IAAI,EAAEK,KAAK,CAACK,OAAO,CAACC,IAAI;QAAGC,MAAM,EAAEP,KAAK,CAACO,MAAM;QAAGF,OAAO,EAAEL,KAAK;QAAGV,EAAE,EAAEU,KAAK,CAACQ,QAAQ;QAAEC,MAAM,EAAC","names":["_createVNode","_component_IonHeader","_component_IonToolbar","_component_IonButtons","slot","_component_IonButton","onClick","_ctx","_component_IonSearchbar","_component_IonIcon","icon","color","_component_IonBadge","_component_IonFooter","_component_IonInput","placeholder","id","_component_IonContent","_component_IonCard","_component_IonCardHeader","topic","text","_createElementBlock","_Fragment","messages","chunk","entry","key","value","type","_component_ChatBubble","content","body","sender","event_id","indent"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/menus/ChatModal.vue"],"sourcesContent":["<template>\n  <IonHeader>\n    <IonToolbar>\n      <IonButtons slot=\"start\">\n        <IonButton @click=\"close\">close</IonButton>\n      </IonButtons>\n      <IonSearchbar></IonSearchbar>\n      <IonButtons slot=\"end\">\n        <IonButton>\n          <IonIcon :icon=\"notifications\" color=\"tertiary\"/>\n          <IonBadge slot=\"end\" color=\"danger\">2</IonBadge>\n        </IonButton>\n      </IonButtons>\n    </IonToolbar>\n  </IonHeader>\n  <IonFooter>\n    <IonToolbar>\n      <IonInput \n        v-model=\"text\" \n        placeholder=\"wtf?\"\n        :clear-on-edit=\"true\"\n        id=\"bottomInput\"></IonInput>\n      <IonButtons slot=\"end\">\n        <IonButton id=\"send\" @click=\"sendAndFetch\">\n          <IonIcon :icon=\"send\" color=\"primary\"/>\n        </IonButton>\n      </IonButtons>\n    </IonToolbar>\n  </IonFooter>\n  <IonContent>\n      <IonCard>\n        <IonCardHeader>\n          {{ updated.topic.text }}\n        </IonCardHeader>\n      </IonCard>\n    <div v-for=\"entry in alternateTimeline.messages.chunk\" v-bind:key=\"entry\" :value=\"content\">\n      <div v-if=\"entry.type === 'm.room.message'\">\n        <ChatBubble :text=\"entry.content.body\" :sender=\"entry.sender\" :content=\"entry\" :id=\"entry.event_id\" indent=\"0\"/>\n    </div>\n    </div>\n  </IonContent>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonContent,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonFooter,\n  IonButtons,\n  IonButton,\n  IonItem,\n  IonLabel,\n  IonInput,\n  modalController,\n  IonCheckbox,\n  IonIcon,\n  IonBadge,\n  IonSearchbar,\n  IonModal,\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonCardContent,\n  IonTextArea,\n  IonChip,\n} from '@ionic/vue';\nimport {\n  send,\n} from 'ionicons/icons';\nimport {notifications} from \"ionicons/icons\";\nimport {defineComponent, ref} from 'vue';\nimport {useMatrixClient} from '@/stores/MatrixClient.js';\nimport ChatBubble from '@/components/ChatBubble.vue';\n\nconst client = useMatrixClient()\n\nlet groupId = ref('')\nlet content = ref({})\n\n\nexport default defineComponent({\n  name: 'ChatModal',\n  components: {\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonFooter,\n    modalController,\n    IonCheckbox,\n    IonIcon,\n    IonBadge,\n    IonSearchbar,\n    IonModal,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonTextArea,\n    IonChip,\n    ChatBubble,\n  },\n  setup() {\n    return {\n      notifications,\n    }\n  },\n  data() {\n    let updated = client.updateChat(this.$props.message.id)\n    let alternateTimeline = ref({})\n    return {\n      text: '',\n      content: this.$props.message,\n      updated,\n      send,\n      alternateTimeline,\n    };\n  },\n  props: {\n    message: Object,\n  },\n  methods: {\n    close() {\n      return modalController.dismiss(null, 'cancel');\n    },\n    async sendText() {\n      let returned = await client.sendText(this.content.id, this.text)\n      document.getElementById('bottomInput').value = ''\n    },\n    async fetchData() {\n      this.alternateTimeline = await client.getTimeline(this.$props.message.id)\n      console.log(this.alternateTimeline)\n      setInterval(async () => {\n        this.alternateTimeline = await client.getTimeline(this.$props.message.id)\n        this.updated = await client.updateChat(this.$props.message.id)\n      }, 1000)\n      this.alternateTimeline = await client.getTimeline(this.$props.message.id)\n      return\n    },\n    sendAndFetch() {\n      this.sendText()\n      this.fetchData()\n    },\n  },\n  created() {\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}