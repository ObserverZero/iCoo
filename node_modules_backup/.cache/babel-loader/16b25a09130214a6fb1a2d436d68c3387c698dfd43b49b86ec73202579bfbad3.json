{"ast":null,"code":"/* eslint-disable vue/no-unused-components */\nimport { IonItem, IonCardHeader, IonCardSubtitle, IonCardContent, IonList, IonButton, IonButtons, IonCardTitle, IonAvatar, IonToggle, IonLabel, IonSegment, IonSegmentButton, IonCard, IonIcon, IonFab, IonFabButton, modalController, IonFabList, IonPage, IonHeader, IonContent, IonFooter } from '@ionic/vue';\nimport { add, addCircle, chatbox, clipboard, colorFilterSharp } from 'ionicons/icons';\nimport { defineComponent, reactive, ref } from 'vue';\nimport { useMatrixClient } from \"@/stores/MatrixClient\";\nimport { useCrossPage } from \"@/stores/CrossPageUpdates\";\nimport ChatModal from '@/menus/ChatModal.vue';\nimport ChatItem from '@/components/ChatItem.vue';\nimport ChatSpace from \"@/components/Group/ChatSpace.vue\";\nimport BoardSpace from \"@/components/Group/BoardSpace.vue\";\nimport GroupSpace from \"@/components/Group/GroupSpace.vue\";\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\nlet groupId = reactive();\nexport default defineComponent({\n  name: \"GroupPage\",\n  setup() {\n    return {\n      clipboard,\n      colorFilterSharp,\n      addCircle,\n      chatbox,\n      add\n    };\n  },\n  data() {\n    let room = ref({});\n    let name = ref('');\n    let topic = ref('');\n    let content = reactive({\n      content: 'chat'\n    });\n    return {\n      room,\n      content\n    };\n  },\n  components: {\n    ChatItem,\n    GroupSpace,\n    BoardSpace,\n    ChatSpace,\n    IonItem,\n    IonContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardContent,\n    IonList,\n    IonButton,\n    IonButtons,\n    IonCardTitle,\n    IonAvatar,\n    IonToggle,\n    IonLabel,\n    IonSegment,\n    IonSegmentButton,\n    IonCard,\n    IonIcon,\n    IonFab,\n    IonFabButton,\n    modalController,\n    IonFabList,\n    IonPage,\n    IonHeader,\n    IonFooter\n  },\n  props: {\n    name: String,\n    groupId: String,\n    topic: String\n  },\n  methods: {\n    async openModal() {\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          groupId: this.groupId\n        }\n      });\n      crossPage.storeModalData({\n        yo: \"wow this\"\n      });\n      return await modal.present();\n    },\n    segmentChanged(event) {\n      this.content.content = event.detail.value;\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      console.log(id);\n      setInterval(async () => {\n        this.room = await client.getRoomById(id);\n      }, 1000);\n      console.log(this.room);\n    }\n  },\n  created() {\n    console.log(this.$route.params.id);\n    this.$watch(() => this.$route.params, () => {\n      this.fetchData();\n    },\n    // fetch the data when the view is created and the data is\n    // already being observed\n    {\n      immediate: true\n    });\n  }\n});","map":{"version":3,"mappings":"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","names":["IonItem","IonCardHeader","IonCardSubtitle","IonCardContent","IonList","IonButton","IonButtons","IonCardTitle","IonAvatar","IonToggle","IonLabel","IonSegment","IonSegmentButton","IonCard","IonIcon","IonFab","IonFabButton","modalController","IonFabList","IonPage","IonHeader","IonContent","IonFooter","add","addCircle","chatbox","clipboard","colorFilterSharp","defineComponent","reactive","ref","useMatrixClient","useCrossPage","ChatModal","ChatItem","ChatSpace","BoardSpace","GroupSpace","client","crossPage","groupId","name","setup","data","room","topic","content","components","props","String","methods","openModal","modal","create","component","componentProps","storeModalData","yo","present","segmentChanged","event","detail","value","fetchData","id","$route","params","console","log","setInterval","getRoomById","created","$watch","immediate"],"sourceRoot":"","sources":["/Users/observerzero/Project/Dev/icoo/src/views/Group.vue"],"sourcesContent":["<template id=\"yeah\">\n  <IonPage ref=\"page\">\n    <IonHeader>\n      <p style=\"padding-top: 1.2em;\"/>\n    </IonHeader>\n    <IonContent>\n\n      <IonCard>\n        <img alt=\"Silhouette of mountains\" src=\"../../public/assets/banners/factory_semi_b&W.png\"/>\n        <IonCardHeader>\n          <IonCardTitle>{{ room.name }}</IonCardTitle>\n          <IonCardSubtitle>&{{ $route.params.id }}</IonCardSubtitle>\n          <IonLabel>{{ room.topic }}</IonLabel>\n        </IonCardHeader>\n        <IonSegment\n            value=\"chat\"\n            @ionChange=\"segmentChanged($event)\"\n            v-model=\"content.content\">\n          <IonSegmentButton value=\"chat\">\n            <IonIcon :icon=\"chatbox\" color=\"tertiary\"/>\n          </IonSegmentButton>\n          <IonSegmentButton value=\"board\">\n            <IonIcon :icon=\"clipboard\" color=\"tertiary\"/>\n          </IonSegmentButton>\n          <IonSegmentButton value=\"groups\">\n            <IonIcon :icon=\"colorFilterSharp\" color=\"tertiary\"/>\n          </IonSegmentButton>\n        </IonSegment>\n      </IonCard>\n\n      <div v-if=\"content.content === 'chat'\">\n        <ChatSpace messages=\"whohoo!\"/>\n      </div>\n      <div v-else-if=\"content.content === 'board'\">\n        <BoardSpace/>\n      </div>\n      <div v-else-if=\"content.content === 'groups'\">\n        <GroupSpace/>\n      </div>\n\n      <IonFab slot=\"fixed\" vertical=\"bottom\" horizontal=\"end\">\n        <IonFabButton color=\"dark\">\n          <IonIcon :icon=\"add\"></IonIcon>\n        </IonFabButton>\n        <IonFabList side=\"top\">\n          <IonFabButton @click=\"openModal\">\n            <IonIcon :icon=\"colorFilterSharp\" color=\"tertiary\"/>\n          </IonFabButton>\n          <IonFabButton>\n            <IonIcon :icon=\"clipboard\" color=\"tertiary\"></IonIcon>\n          </IonFabButton>\n          <IonFabButton>\n            <IonIcon :icon=\"chatbox\" color=\"tertiary\"></IonIcon>\n          </IonFabButton>\n        </IonFabList>\n      </IonFab>\n\n    </IonContent>\n    <IonFooter></IonFooter>\n  </IonPage>\n</template>\n\n<script>\n/* eslint-disable vue/no-unused-components */\nimport {\n  IonItem,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardContent,\n  IonList,\n  IonButton,\n  IonButtons,\n  IonCardTitle,\n  IonAvatar,\n  IonToggle,\n  IonLabel,\n  IonSegment,\n  IonSegmentButton,\n  IonCard,\n  IonIcon,\n  IonFab,\n  IonFabButton,\n  modalController,\n  IonFabList,\n  IonPage,\n  IonHeader,\n  IonContent,\n  IonFooter,\n} from '@ionic/vue';\nimport {\n  add,\n  addCircle,\n  chatbox,\n  clipboard,\n  colorFilterSharp,\n} from 'ionicons/icons';\nimport {defineComponent, reactive, ref} from 'vue';\nimport {useMatrixClient} from \"@/stores/MatrixClient\";\nimport {useCrossPage} from \"@/stores/CrossPageUpdates\";\nimport ChatModal from '@/menus/ChatModal.vue';\nimport ChatItem from '@/components/ChatItem.vue';\nimport ChatSpace from \"@/components/Group/ChatSpace.vue\";\nimport BoardSpace from \"@/components/Group/BoardSpace.vue\";\nimport GroupSpace from \"@/components/Group/GroupSpace.vue\";\n\nlet client = useMatrixClient();\nlet crossPage = useCrossPage();\nlet groupId = reactive();\n\nexport default defineComponent({\n  name: \"GroupPage\",\n  setup() {\n    return {\n      clipboard,\n      colorFilterSharp,\n      addCircle,\n      chatbox,\n      add,\n    }\n  },\n  data() {\n    let room = ref({})\n    let name = ref('')\n    let topic = ref('')\n    let content = reactive({\n      content: 'chat'\n    })\n    return {\n      room,\n      content,\n    }\n  },\n  components: {\n    ChatItem,\n    GroupSpace,\n    BoardSpace,\n    ChatSpace,\n    IonItem,\n    IonContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardContent,\n    IonList,\n    IonButton,\n    IonButtons,\n    IonCardTitle,\n    IonAvatar,\n    IonToggle,\n    IonLabel,\n    IonSegment,\n    IonSegmentButton,\n    IonCard,\n    IonIcon,\n    IonFab,\n    IonFabButton,\n    modalController,\n    IonFabList,\n    IonPage,\n    IonHeader,\n    IonFooter,\n  },\n  props: {\n    name: String,\n    groupId: String,\n    topic: String,\n  },\n  methods: {\n    async openModal() {\n      const modal = await modalController.create({\n        component: ChatModal,\n        componentProps: {\n          groupId: this.groupId,\n        }\n      });\n      crossPage.storeModalData({yo: \"wow this\"});\n      return await modal.present();\n    },\n    segmentChanged(event) {\n      this.content.content = event.detail.value;\n    },\n    async fetchData() {\n      const id = \"!\" + this.$route.params.id + \":matrix.org\";\n      console.log(id)\n      setInterval(async () => {\n        this.room = await client.getRoomById(id)\n      }, 1000);\n      console.log(this.room)\n    },\n  },\n  created() {\n    console.log(this.$route.params.id);\n    this.$watch(\n        () => this.$route.params,\n        () => {\n          this.fetchData()\n        },\n        // fetch the data when the view is created and the data is\n        // already being observed\n        {immediate: true}\n    )\n  },\n})\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}